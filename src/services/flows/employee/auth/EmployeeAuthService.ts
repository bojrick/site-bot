import { whatsappService } from '../../../whatsapp';
import { UserService } from '../../../userService';

export class EmployeeAuthService {
  private userService: UserService;

  constructor() {
    this.userService = new UserService();
  }

  /**
   * Check if user needs verification
   */
  needsVerification(user: any, isAdminImpersonation: boolean = false): boolean {
    // Admin impersonation bypasses verification
    if (isAdminImpersonation) {
      return false;
    }

    // Regular employees need verification if not verified
    return !user.is_verified && user.role === 'employee';
  }

  /**
   * Handle employee verification flow
   */
  async handleVerification(user: any, phone: string, messageText: string): Promise<{ verified: boolean; shouldContinue: boolean }> {
    const text = messageText.trim();

    // Handle OTP submission
    if (/^\d{6}$/.test(text)) {
      return await this.handleOTPSubmission(phone, text);
    }

    // Handle OTP requests/resend
    if (this.isOTPRequest(text)) {
      await this.handleOTPRequest(phone);
      return { verified: false, shouldContinue: false };
    }

    // First time employee - auto-send OTP
    await this.sendInitialOTP(phone);
    return { verified: false, shouldContinue: false };
  }

  /**
   * Handle OTP code submission
   */
  private async handleOTPSubmission(phone: string, otpCode: string): Promise<{ verified: boolean; shouldContinue: boolean }> {
    try {
      const result = await this.userService.verifyOTPCode(phone, otpCode);
      
      if (result.success) {
        await whatsappService.sendTextMessage(phone, 
          `тЬЕ ${result.message}\n\nЁЯОЙ ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ! рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...`
        );
        return { verified: true, shouldContinue: true };
      } else {
        await whatsappService.sendTextMessage(phone, `тЭМ ${result.message}`);
        await this.promptForOTP(phone);
        return { verified: false, shouldContinue: false };
      }
    } catch (error) {
      console.error('Error verifying OTP:', error);
      await whatsappService.sendTextMessage(phone, 
        "тЭМ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢ркиркорк╛ркВ ркнрлВрк▓. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ."
      );
      return { verified: false, shouldContinue: false };
    }
  }

  /**
   * Handle OTP request/resend
   */
  private async handleOTPRequest(phone: string): Promise<void> {
    try {
      // Check if there's already an active OTP (rate limiting)
      const hasActiveOTP = await this.userService.hasActiveOTP(phone);
      
      if (hasActiveOTP) {
        await whatsappService.sendTextMessage(phone, 
          "тП░ ркХрлГрккрк╛ ркХрк░рлАркирлЗ 1 ркорк┐ркирк┐ркЯ рк░рк╛рк╣ ркЬрлБркУ, рккркЫрлА ркирк╡рлЛ OTP ркоркВркЧрк╛рк╡рлЛ."
        );
        return;
      }

      // Send new OTP
      const sent = await this.userService.generateAndSendOTP(phone);
      
      if (sent) {
        await whatsappService.sendTextMessage(phone, 
          "ЁЯУ▓ ркирк╡рлЛ OTP ркорлЛркХрк▓рлНркпрлЛ ркЫрлЗ! ркХрлГрккрк╛ ркХрк░рлАркирлЗ 6-ркЕркВркХркирлЛ ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:"
        );
      } else {
        await whatsappService.sendTextMessage(phone, 
          "тЭМ OTP ркорлЛркХрк▓рк╡рк╛ркорк╛ркВ ркирк┐рк╖рлНрклрк│. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккркЫрлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ."
        );
      }
    } catch (error) {
      console.error('Error handling OTP request:', error);
      await whatsappService.sendTextMessage(phone, 
        "тЭМ OTP ркорлЛркХрк▓рк╡рк╛ркорк╛ркВ ркнрлВрк▓. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккркЫрлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ."
      );
    }
  }

  /**
   * Send initial OTP to new employee
   */
  private async sendInitialOTP(phone: string): Promise<void> {
    try {
      // Check if OTP already sent
      const hasActiveOTP = await this.userService.hasActiveOTP(phone);
      
      if (!hasActiveOTP) {
        const sent = await this.userService.generateAndSendOTP(phone);
        
        if (sent) {
          const message = `ЁЯСЛ *ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!*

ЁЯФР рк╕рлБрк░ркХрлНрк╖рк╛ ркорк╛ркЯрлЗ, ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлБркВ ркПркХрк╛ркЙркирлНркЯ рк╡рлЗрк░рк┐рклрк╛ркИ ркХрк░рлЛ. 

ЁЯУ▓ ркорлЗркВ ркдркоркирлЗ 6-ркЕркВркХркирлЛ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки ркХрлЛркб ркорлЛркХрк▓рлНркпрлЛ ркЫрлЗ.

ркЖркЧрк│ рк╡ркзрк╡рк╛ ркорк╛ркЯрлЗ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:`;

          await whatsappService.sendTextMessage(phone, message);
        } else {
          await whatsappService.sendTextMessage(phone, 
            "тЭМ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки ркХрлЛркб ркорлЛркХрк▓рк╡рк╛ркорк╛ркВ ркнрлВрк▓. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккркЫрлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ."
          );
        }
      } else {
        await this.promptForOTP(phone);
      }
    } catch (error) {
      console.error('Error sending initial OTP:', error);
      await whatsappService.sendTextMessage(phone, 
        "тЭМ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки рккрлНрк░ркХрлНрк░рк┐ркпрк╛ркорк╛ркВ ркнрлВрк▓. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккркЫрлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ."
      );
    }
  }

  /**
   * Prompt user to enter OTP
   */
  private async promptForOTP(phone: string): Promise<void> {
    const message = `ЁЯФР *ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлЛ 6-ркЕркВркХркирлЛ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ*

ЁЯУ▓ ркЬрлЛ ркХрлЛркб рки ркорк│рлНркпрлЛ рк╣рлЛркп ркдрлЛ:
тАв 'resend' ркЯрк╛ркИркк ркХрк░рлЛ ркирк╡рлЛ ркХрлЛркб ркорлЗрк│рк╡рк╡рк╛
тАв 'otp' ркЯрк╛ркИркк ркХрк░рлЛ ркХрлЛркб рклрк░рлАркерлА ркоркВркЧрк╛рк╡рк╡рк╛`;

    await whatsappService.sendTextMessage(phone, message);
  }

  /**
   * Check if message is an OTP request
   */
  private isOTPRequest(text: string): boolean {
    const lowerText = text.toLowerCase();
    return lowerText.includes('otp') || 
           lowerText.includes('resend') || 
           lowerText.includes('code') ||
           lowerText.includes('ркХрлЛркб');
  }

  /**
   * Send welcome message after successful verification
   */
  async sendVerificationSuccessMessage(phone: string): Promise<void> {
    const message = `ЁЯОЙ *рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки рк╕рклрк│!*

тЬЕ ркдркорк╛рк░рлБркВ ркПркХрк╛ркЙркирлНркЯ рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ рк╡рлЗрк░рк┐рклрк╛ркИ ркеркИ ркЧркпрлБркВ ркЫрлЗ.

ЁЯЪА рк╣рк╡рлЗ ркдркорлЗ ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓ркирлА ркмркзрлА рк╕рлБрк╡рк┐ркзрк╛ркУркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлА рк╢ркХрлЛ ркЫрлЛ.

ЁЯУН ркЖркЧрк│ рк╡ркзрк╡рк╛ ркорк╛ркЯрлЗ ркдркорк╛рк░рлА рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ...`;

    await whatsappService.sendTextMessage(phone, message);
  }
} 