import { getDb } from '../../db';
import { activities, material_requests, sessions, invoices, sites } from '../../db/schema';
import { eq } from 'drizzle-orm';
import { whatsappService, ImageMessage } from '../whatsapp';
import { UserService } from '../userService';
import { r2Service } from '../cloudflareR2';
import process from 'process';

// Define session data interface
interface EmployeeSessionData {
  selected_site?: string;
  site_selection_shown?: boolean;
  site_id?: string;
  activity_type?: string;
  hours?: number;
  description?: string;
  image_info?: any;
  material_name?: string;
  quantity?: number;
  unit?: string;
  urgency?: string;
  company_name?: string;
  invoice_description?: string;
  invoice_date?: Date;
  amount?: number;
  upload_retry_count?: number; // Track retry attempts
  is_admin_impersonation?: boolean; // Track if this is admin impersonation
}

export class EmployeeFlow {
  private userService: UserService;
  private readonly MAX_UPLOAD_RETRIES = 2;
  private readonly UPLOAD_TIMEOUT_MS = 30000; // 30 seconds

  constructor() {
    this.userService = new UserService();
  }

  async handleMessage(
    user: any,
    session: any,
    messageText: string,
    interactiveData?: any,
    imageData?: ImageMessage
  ) {
    const phone = user.phone;
    const currentData = session.data as EmployeeSessionData;

    console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] Employee flow called with:', {
      phone,
      messageText,
      sessionIntent: session.intent,
      sessionStep: session.step,
      selectedSite: currentData?.selected_site,
      isAdminImpersonation: currentData?.is_admin_impersonation
    });

    // Check if employee needs to be verified (only for real employees, not admin impersonation)
    if (!user.is_verified && user.role === 'employee' && !currentData?.is_admin_impersonation) {
      await this.handleEmployeeVerification(user, messageText);
      return;
    }

    // Check if site selection is needed for real employees
    if (!currentData?.selected_site && !currentData?.is_admin_impersonation) {
      await this.handleSiteSelectionForEmployee(user, session, messageText);
      return;
    }

    // For admin impersonation or real employees with site selected, proceed to flows
    if (session.intent) {
      await this.handleFlowStep(user, session, messageText, interactiveData, imageData);
    } else {
      // Show main menu if no active intent
      await this.handleMainMenu(user, messageText, currentData);
    }
  }

  /**
   * Handle site selection logic specifically for real employees (not admin impersonation)
   */
  private async handleSiteSelectionForEmployee(user: any, session: any, messageText: string) {
    const phone = user.phone;
    const currentData = session.data as EmployeeSessionData;

    console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] Handling site selection for real employee');

    // If this is the first time, show available sites
    if (!currentData.site_selection_shown) {
      await this.updateSession(phone, {
        step: 'select_site',
        data: { ...currentData, site_selection_shown: true }
      });
      await this.showEmployeeSiteSelection(phone, user);
      return;
    }

    // Handle site selection response
    if (messageText.startsWith('site_')) {
      console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] Real employee selected site:', messageText);
      
      await this.updateSession(phone, {
        step: null,
        data: { ...currentData, selected_site: messageText }
      });
      
      await this.showWelcomeMessage(phone, messageText);
      return;
    }

    // Invalid selection, show sites again
    await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрк╛ркжрлАркорк╛ркВркерлА ркпрлЛркЧрлНркп рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ:");
    await this.showEmployeeSiteSelection(phone, user);
  }

  /**
   * Show site selection for real employees based on their assignments
   */
  private async showEmployeeSiteSelection(phone: string, user: any) {
    try {
      console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] Showing site selection for employee:', user.id);
      
      // Get employee's assigned sites
      const assignedSites = await this.getEmployeeAssignedSites(user);
      
      if (assignedSites.length === 1) {
        // Auto-select if only one site assigned
        console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] Auto-selecting single assigned site:', assignedSites[0].id);
        
        // Ensure display_id doesn't already have site_ prefix to avoid duplication
        const cleanDisplayId = assignedSites[0].display_id?.startsWith('site_') 
          ? assignedSites[0].display_id 
          : `site_${assignedSites[0].display_id}`;
        
        await this.updateSession(phone, {
          step: null,
          data: { selected_site: cleanDisplayId, site_selection_shown: true }
        });
        
        await whatsappService.sendTextMessage(phone, 
          `тЬЕ ркдркоркирлЗ ${assignedSites[0].name} ркорк╛ркЯрлЗ рк╕рлНрк╡ркЪрк╛рк▓рк┐ркд рк░рлАркдрлЗ рк╕рлЛркВрккрк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрк╛ ркЫрлЛ.`
        );
        
        setTimeout(async () => {
          await this.showWelcomeMessage(phone, cleanDisplayId);
        }, 1000);
        
        return;
      }

      // Show selection if multiple sites or no assignments
      const siteOptions = assignedSites.map(site => {
        // Ensure display_id doesn't already have site_ prefix to avoid duplication
        const cleanDisplayId = site.display_id?.startsWith('site_') 
          ? site.display_id 
          : `site_${site.display_id}`;
        
        return {
          id: cleanDisplayId,
          title: `ЁЯПЧя╕П ${site.name}`,
          description: site.location || site.description || 'рк╕рк╛ркИркЯ рк╡рк┐ркЧркд'
        };
      });

      // If no assigned sites, show all active sites as fallback
      if (siteOptions.length === 0) {
        console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] No assigned sites, showing all active sites');
        const allSites = await this.getAllActiveSites();
        siteOptions.push(...allSites.map(site => {
          // Ensure display_id doesn't already have site_ prefix to avoid duplication
          const cleanDisplayId = site.display_id?.startsWith('site_') 
            ? site.display_id 
            : `site_${site.display_id}`;
          
          return {
            id: cleanDisplayId,
            title: `ЁЯПЧя╕П ${site.name}`,
            description: site.location || site.description || 'рк╕рк╛ркИркЯ рк╡рк┐ркЧркд'
          };
        }));
      }

      const message = assignedSites.length > 0 
        ? "ркдркоркирлЗ рк╕рлЛркВрккрлЗрк▓рлА рк╕рк╛ркИркЯрлНрк╕ркорк╛ркВркерлА рккрк╕ркВркж ркХрк░рлЛ:"
        : "ркХркпрк╛ рк╕рк╛ркИркЯ рккрк░ ркХрк╛рко ркХрк░рк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?";

      await whatsappService.sendListMessage(
        phone,
        message,
        "рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ",
        [{
          title: "ркЙрккрк▓ркмрлНркз рк╕рк╛ркИркЯрлНрк╕",
          rows: siteOptions
        }]
      );

    } catch (error) {
      console.error('Error showing employee site selection:', error);
      
      // Try to show all active sites as fallback
      try {
        const allSites = await this.getAllActiveSites();
        if (allSites.length > 0) {
          const siteOptions = allSites.map(site => ({
            id: site.id, // Use UUID as ID
            title: `ЁЯПЧя╕П ${site.name}`,
            description: site.location || site.description || 'рк╕рк╛ркИркЯ рк╡рк┐ркЧркд'
          }));

          await whatsappService.sendListMessage(
            phone,
            "ркХркпрк╛ рк╕рк╛ркИркЯ рккрк░ ркХрк╛рко ркХрк░рк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?",
            "рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ",
            [{
              title: "ркЙрккрк▓ркмрлНркз рк╕рк╛ркИркЯрлНрк╕",
              rows: siteOptions
            }]
          );
        } else {
          await whatsappService.sendTextMessage(phone, 
            "тЭМ ркХрлЛркИ рк╕рк╛ркИркЯрлНрк╕ ркЙрккрк▓ркмрлНркз ркиркерлА. ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркПркбркорк┐ркиркирлЛ рк╕ркВрккрк░рлНркХ ркХрк░рлЛ."
          );
        }
      } catch (fallbackError) {
        console.error('Error in fallback site selection:', fallbackError);
        await whatsappService.sendTextMessage(phone, 
          "тЭМ рк╕рк╛ркИркЯрлНрк╕ рк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркнрлВрк▓. ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркПркбркорк┐ркиркирлЛ рк╕ркВрккрк░рлНркХ ркХрк░рлЛ."
        );
      }
    }
  }

  /**
   * Get sites assigned to an employee from their user details or managed sites
   */
  private async getEmployeeAssignedSites(user: any): Promise<any[]> {
    try {
      // Method 1: Check if employee is assigned specific sites in user details
      if (user.details?.assigned_sites) {
        const assignedSiteIds = user.details.assigned_sites;
        if (Array.isArray(assignedSiteIds) && assignedSiteIds.length > 0) {
          const assignedSites = await getDb()
            .select()
            .from(sites)
            .where(eq(sites.status, 'active'));
          
          return assignedSites
            .filter(site => assignedSiteIds.includes(site.id))
            .map(site => ({
              ...site,
              display_id: (site.details as any)?.display_id || site.id.slice(0, 8)
            }));
        }
      }

      // Method 2: Check if employee is a site manager
      const managedSites = await getDb()
        .select()
        .from(sites)
        .where(eq(sites.manager_id, user.id));

      if (managedSites.length > 0) {
        return managedSites.map(site => ({
          ...site,
          display_id: (site.details as any)?.display_id || site.id.slice(0, 8)
        }));
      }

      // Method 3: No specific assignments found
      return [];
      
    } catch (error) {
      console.error('Error getting employee assigned sites:', error);
      return [];
    }
  }

  /**
   * Get all active sites as fallback
   */
  private async getAllActiveSites(): Promise<any[]> {
    try {
      const activeSites = await getDb()
        .select()
        .from(sites)
        .where(eq(sites.status, 'active'));

      return activeSites.map(site => {
        const siteDetails = site.details as any;
        return {
          ...site,
          display_id: siteDetails?.display_id || site.id.slice(0, 8),
          description: site.location || siteDetails?.description || 'Active site'
        };
      });
      
    } catch (error) {
      console.error('Error getting all active sites:', error);
      return [];
    }
  }

  // Add session management methods to this class
  async updateSession(phone: string, updates: Partial<typeof sessions.$inferInsert>) {
    try {
      await getDb()
        .update(sessions)
        .set({ ...updates, updated_at: new Date() })
        .where(eq(sessions.phone, phone));
    } catch (error) {
      console.error('Error updating session:', error);
      throw error;
    }
  }

  async clearSession(phone: string) {
    try {
      await getDb()
        .update(sessions)
        .set({ 
          intent: null, 
          step: null, 
          data: {}, 
          updated_at: new Date() 
        })
        .where(eq(sessions.phone, phone));
    } catch (error) {
      console.error('Error clearing session:', error);
      throw error;
    }
  }

  private async handleEmployeeVerification(user: any, messageText: string) {
    const phone = user.phone;
    const text = messageText.trim();

    // Check if user is trying to send OTP
    if (/^\d{6}$/.test(text)) {
      const result = await this.userService.verifyOTPCode(phone, text);
      await whatsappService.sendTextMessage(phone, result.message);
      
      if (result.success) {
        // Show welcome message and main menu
        setTimeout(async () => {
          await this.showWelcomeMessage(phone, null); // No site pre-selected for real employees
        }, 1000);
      }
      return;
    }

    // Handle OTP requests with better retry logic
    if (text.toLowerCase().includes('otp') || text.toLowerCase().includes('resend') || text.toLowerCase().includes('code')) {
      const hasActiveOTP = await this.userService.hasActiveOTP(phone);
      
      if (hasActiveOTP) {
        // Check rate limiting - only allow one resend per minute
        await whatsappService.sendTextMessage(phone, "тП░ ркХрлГрккрк╛ ркХрк░рлАркирлЗ 1 ркорк┐ркирк┐ркЯ рк░рк╛рк╣ ркЬрлБркУ, рккркЫрлА ркирк╡рлЛ OTP ркоркВркЧрк╛рк╡рлЛ.");
        return;
      }
      
      const sent = await this.userService.generateAndSendOTP(phone);
      if (sent) {
        await whatsappService.sendTextMessage(phone, "ЁЯУ▓ ркирк╡рлЛ OTP ркорлЛркХрк▓рлНркпрлЛ ркЫрлЗ! ркХрлГрккрк╛ ркХрк░рлАркирлЗ 6-ркЕркВркХркирлЛ ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:");
      } else {
        await whatsappService.sendTextMessage(phone, "тЭМ OTP ркорлЛркХрк▓рк╡рк╛ркорк╛ркВ ркирк┐рк╖рлНрклрк│. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккркЫрлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.");
      }
      return;
    }

    // First time employee - send OTP
    const hasActiveOTP = await this.userService.hasActiveOTP(phone);
    if (!hasActiveOTP) {
      const sent = await this.userService.generateAndSendOTP(phone);
      if (sent) {
        const message = `ЁЯСЛ ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!

ЁЯФР рк╕рлБрк░ркХрлНрк╖рк╛ ркорк╛ркЯрлЗ, ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлБркВ ркПркХрк╛ркЙркирлНркЯ рк╡рлЗрк░рк┐рклрк╛ркИ ркХрк░рлЛ. ркорлЗркВ ркдркоркирлЗ 6-ркЕркВркХркирлЛ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки ркХрлЛркб ркорлЛркХрк▓рлНркпрлЛ ркЫрлЗ.

ркЖркЧрк│ рк╡ркзрк╡рк╛ ркорк╛ркЯрлЗ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:`;
        await whatsappService.sendTextMessage(phone, message);
      }
    } else {
      await whatsappService.sendTextMessage(phone, "ЁЯФР ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлЛ 6-ркЕркВркХркирлЛ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:\n\nркирк╡рлЛ ркХрлЛркб ркЬрлЛркИркП ркдрлЛ 'resend' ркЯрк╛ркИркк ркХрк░рлЛ.");
    }
  }

  private async showWelcomeMessage(phone: string, selectedSite?: string | null) {
    let welcomeMessage = `ЁЯОЙ *ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!*`;
    
    if (selectedSite) {
      const siteName = await this.getSiteName(selectedSite);
      welcomeMessage += `\n\nркдркорлЗ рк╣рк╡рлЗ ${siteName} ркорк╛ркЯрлЗ рк╡рлЗрк░рк┐рклрк╛ркИ ркеркИ ркЧркпрк╛ ркЫрлЛ.`;
    }
    
    welcomeMessage += `\n\nркЖркЬрлЗ ркдркорлЗ рк╢рлБркВ ркХрк░рк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?`;

    await whatsappService.sendTextMessage(phone, welcomeMessage);
    await this.showMainMenu(phone, selectedSite);
  }

  private async handleMainMenu(user: any, messageText: string, currentData?: EmployeeSessionData) {
    const phone = user.phone;
    const text = messageText.toLowerCase().trim();

    // Handle common commands
    if (text === 'menu' || text === 'main' || text === 'start' || text === 'ркорлЗркирлБ') {
      await this.showMainMenu(phone, currentData?.selected_site);
      return;
    }

    if (text === 'help' || text === 'ркоркжркж') {
      await this.showHelp(phone);
      return;
    }

    // Handle main menu selections
    switch (text) {
      case 'log_activity':
      case '1':
        await this.startActivityLogging(phone, currentData?.selected_site);
        break;
      
      case 'request_materials':
      case '2':
        await this.startMaterialRequest(phone, currentData?.selected_site);
        break;
      
      case 'track_invoices':
      case '3':
        await this.startInvoiceTracking(phone);
        break;
      
      case 'view_dashboard':
      case '4':
        await this.showDashboard(phone);
        break;
      
      case 'help':
      case '5':
        await this.showHelp(phone);
        break;

      default:
        await this.showMainMenu(phone, currentData?.selected_site);
        break;
    }
  }

  private async showMainMenu(phone: string, selectedSite?: string | null) {
    const siteName = selectedSite ? await this.getSiteName(selectedSite) : 'No Site Selected';

    const message = `ЁЯС╖тАНтЩВя╕П *ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓*
ЁЯПЧя╕П *рк╕рк╛ркИркЯ:* ${siteName}

ркЖркЬрлЗ рк╣рлБркВ ркдркорк╛рк░рлА ркХрлЗрк╡рлА ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?`;

    // Limit to 3 buttons as per WhatsApp's requirements
    const buttons = [
      { id: 'log_activity', title: 'ЁЯУЭ ркХрк╛ркоркирлА ркирлЛркВркз ркХрк░рлЛ' },
      { id: 'request_materials', title: 'ЁЯУж рк╕рк╛ркоркЧрлНрк░рлАркирлА ркорк╛ркВркЧ' },
      { id: 'track_invoices', title: 'ЁЯз╛ ркЗркирлНрк╡рлЙркЗрк╕ ркЯрлНрк░рлЗркХрк┐ркВркЧ' }
    ];

    await whatsappService.sendButtonMessage(phone, message, buttons);
    
    // Send additional options in list format
    setTimeout(async () => {
      await whatsappService.sendListMessage(
        phone,
        "рк╡ркзрк╛рк░рк╛ркирк╛ рк╡рк┐ркХрк▓рлНрккрлЛ:",
        "рк╡ркзрлБ рк╡рк┐ркХрк▓рлНрккрлЛ",
        [{
          title: "рк╡ркзрлБ рк╡рк┐ркХрк▓рлНрккрлЛ",
          rows: [
            { id: 'view_dashboard', title: 'ЁЯУК ркбрлЗрк╢ркмрлЛрк░рлНркб ркЬрлБркУ', description: 'ркдркорк╛рк░рлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУркирлБркВ ркбрлЗрк╢ркмрлЛрк░рлНркб' },
            { id: 'help', title: 'тЭУ ркоркжркж', description: 'ркоркжркж ркЕркирлЗ рк╕рк╣рк╛ркп ркорлЗрк│рк╡рлЛ' },
            { id: 'contact_admin', title: 'ЁЯУЮ ркПркбркорк┐ркиркирлЛ рк╕ркВрккрк░рлНркХ', description: 'рк╡рк╣рлАрк╡ркЯрлАркдркВркдрлНрк░ркирлЛ рк╕ркВрккрк░рлНркХ ркХрк░рлЛ' }
          ]
        }]
      );
    }, 1000);
  }

  private async showHelp(phone: string) {
    const helpText = `ЁЯдЭ *ркХрк░рлНркоркЪрк╛рк░рлА ркоркжркж ркЕркирлЗ рк╕рк╣рк╛ркп*

*ркЙрккрк▓ркмрлНркз ркХркорк╛ркирлНркбрлНрк╕:*
тАв *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ - ркорлБркЦрлНркп ркорлЗркирлБ рккрк░ ркЬрк╛ркУ
тАв *рк▓рлЛркЧ* ркЯрк╛ркИркк ркХрк░рлЛ - ркЭркбрккркерлА рккрлНрк░рк╡рлГркдрлНркдрк┐ ркирлЛркВркзрк╡рлЛ
тАв *рк╕рк╛ркоркЧрлНрк░рлА* ркЯрк╛ркИркк ркХрк░рлЛ - рк╕рк╛ркоркЧрлНрк░рлАркирлА ркорк╛ркВркЧ
тАв *ркбрлЗрк╢ркмрлЛрк░рлНркб* ркЯрк╛ркИркк ркХрк░рлЛ - ркдркорк╛рк░рлБркВ ркбрлЗрк╢ркмрлЛрк░рлНркб ркЬрлБркУ

*ркоркжркж ркЬрлЛркИркП?*
тАв *ркПркбркорк┐рки* ркЯрк╛ркИркк ркХрк░рлЛ рк╡рк╣рлАрк╡ркЯрлАркдркВркдрлНрк░ркирлЛ рк╕ркВрккрк░рлНркХ ркХрк░рк╡рк╛
тАв рклрлЛрки: +91-9999999999 (ркПркбркорк┐рки)

*ркХрк╛ркоркирк╛ ркХрк▓рк╛ркХрлЛ:*
рк╕рлЛркорк╡рк╛рк░ - рк╢ркирк┐рк╡рк╛рк░: рк╕рк╡рк╛рк░рлЗ 8:00 - рк╕рк╛ркВркЬрлЗ 6:00`;

    await whatsappService.sendTextMessage(phone, helpText);
  }

  private async startActivityLogging(phone: string, selectedSite?: string | null) {
    const session = (await getDb().select().from(sessions).where(eq(sessions.phone, phone)))[0];
    const currentData = session?.data as EmployeeSessionData;

    console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] Starting activity logging with site:', selectedSite);

    // Site should already be selected from main flow
    if (!selectedSite) {
      await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккрк╣рлЗрк▓рк╛ рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ. ркорлБркЦрлНркп ркорлЗркирлБ ркорк╛ркЯрлЗ 'ркорлЗркирлБ' ркЯрк╛ркИркк ркХрк░рлЛ.");
      return;
    }

    await this.updateSession(phone, {
      intent: 'log_activity',
      step: 'select_activity_type',
      data: { 
        ...currentData, 
        selected_site: selectedSite, 
        site_id: selectedSite,
        // Ensure admin impersonation flag is preserved
        is_admin_impersonation: currentData?.is_admin_impersonation || false
      }
    });

    await this.showActivityTypes(phone);
  }

  private async startMaterialRequest(phone: string, selectedSite?: string | null) {
    const session = (await getDb().select().from(sessions).where(eq(sessions.phone, phone)))[0];
    const currentData = session?.data as EmployeeSessionData;

    console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] Starting material request with site:', selectedSite);

    // Site should already be selected from main flow
    if (!selectedSite) {
      await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккрк╣рлЗрк▓рк╛ рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ. ркорлБркЦрлНркп ркорлЗркирлБ ркорк╛ркЯрлЗ 'ркорлЗркирлБ' ркЯрк╛ркИркк ркХрк░рлЛ.");
      return;
    }

    await this.updateSession(phone, {
      intent: 'request_materials',
      step: 'enter_material',
      data: { 
        ...currentData, 
        selected_site: selectedSite, 
        site_id: selectedSite,
        // Ensure admin impersonation flag is preserved
        is_admin_impersonation: currentData?.is_admin_impersonation || false
      }
    });

    await whatsappService.sendTextMessage(phone, "ркдркоркирлЗ ркХркИ рк╕рк╛ркоркЧрлНрк░рлАркирлА ркЬрк░рлВрк░ ркЫрлЗ? (ркЬрлЗрко ркХрлЗ, рк╕рк┐ркорлЗркирлНркЯ, рк╕рлНркЯрлАрк▓, рк░рлЗркдрлА рк╡ркЧрлЗрк░рлЗ):");
  }

  private async handleFlowStep(
    user: any,
    session: any,
    messageText: string,
    interactiveData?: any,
    imageData?: ImageMessage
  ) {
    const phone = user.phone;

    if (session.intent === 'log_activity') {
      await this.handleActivityLogging(phone, session, messageText, imageData);
    } else if (session.intent === 'request_materials') {
      await this.handleMaterialRequest(phone, session, messageText, imageData);
    } else if (session.intent === 'track_invoices') {
      await this.handleInvoiceTracking(phone, session, messageText, imageData);
    }
  }

  private async handleActivityLogging(phone: string, session: any, messageText: string, imageData?: ImageMessage) {
    const currentData = session.data || {};

    switch (session.step) {
      case 'select_activity_type':
        const validTypes = ['construction', 'inspection', 'maintenance', 'planning', 'other'];
        if (!validTypes.includes(messageText)) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп рккрлНрк░рк╡рлГркдрлНркдрк┐ркирлЛ рккрлНрк░ркХрк╛рк░ рккрк╕ркВркж ркХрк░рлЛ:");
          await this.showActivityTypes(phone);
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_hours',
          data: { ...currentData, activity_type: messageText }
        });

        await whatsappService.sendTextMessage(phone, "ркдркорлЗ ркХрлЗркЯрк▓рк╛ ркХрк▓рк╛ркХ ркХрк╛рко ркХрк░рлНркпрлБркВ? (ркиркВркмрк░ ркжрк╛ркЦрк▓ ркХрк░рлЛ):");
        break;

      case 'enter_hours':
        const hours = parseInt(messageText);
        if (isNaN(hours) || hours <= 0 || hours > 24) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп ркХрк▓рк╛ркХрлЛркирлА рк╕ркВркЦрлНркпрк╛ ркжрк╛ркЦрк▓ ркХрк░рлЛ (1-24):");
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_description',
          data: { ...currentData, hours }
        });

        await whatsappService.sendTextMessage(phone, "ркдркорлЗ рк╢рлБркВ ркХрк╛рко ркХрк░рлНркпрлБркВ ркдрлЗркирлБркВ рк╡рк░рлНркгрки ркХрк░рлЛ (рк╡рлИркХрк▓рлНрккрк┐ркХ - 'skip' ркЯрк╛ркИркк ркХрк░рлЛ ркЫрлЛркбрк╡рк╛ ркорк╛ркЯрлЗ):");
        break;

      case 'enter_description':
        const description = messageText.toLowerCase() === 'skip' ? '' : messageText;
        
        await this.updateSession(phone, {
          step: 'upload_image',
          data: { ...currentData, description, upload_retry_count: 0 }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУ╕ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХрк╛ркоркирлЛ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ:\n\nтАв ркХрк╛ркоркирлА рк╕рк╛ркИркЯркирлЛ рклрлЛркЯрлЛ\nтАв рккрлВрк░рлНркг ркеркпрлЗрк▓рк╛ ркХрк╛ркоркирлЛ рклрлЛркЯрлЛ\nтАв ркХрлЛркИ рклрлЛркЯрлЛ рки рк╣рлЛркп ркдрлЛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ");
        break;

      case 'upload_image':
        await this.handleImageUpload(phone, currentData, messageText, imageData, 'activities', 'ркХрк╛ркоркирлЛ рклрлЛркЯрлЛ', this.completeActivityLog.bind(this));
        break;

      default:
        // Handle null step - start the activity logging flow
        console.log('ЁЯОп [EMPLOYEE] Starting activity logging flow - no step found');
        await this.updateSession(phone, {
          step: 'select_activity_type',
          data: { ...currentData }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУЭ *рккрлНрк░рк╡рлГркдрлНркдрк┐ рк▓рлЛркЧ ркХрк░рлЛ*\n\nркдркорлЗ ркХркпрк╛ рккрлНрк░ркХрк╛рк░ркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ ркХрк░рлА ркЫрлЗ?");
        await this.showActivityTypes(phone);
        break;
    }
  }

  private async showActivityTypes(phone: string) {
    const activityTypes = [
      { id: 'construction', title: 'ЁЯФи ркмрк╛ркВркзркХрк╛рко ркХрк╛рк░рлНркп', description: 'ркмрк┐рк▓рлНркбрк┐ркВркЧ ркЕркирлЗ ркмрк╛ркВркзркХрк╛ркоркирк╛ ркХрк╛рк░рлНркпрлЛ' },
      { id: 'inspection', title: 'ЁЯФН ркдрккрк╛рк╕', description: 'ркЧрлБркгрк╡ркдрлНркдрк╛ ркдрккрк╛рк╕ ркЕркирлЗ ркирк┐рк░рлАркХрлНрк╖ркг' },
      { id: 'maintenance', title: 'ЁЯФз ркЬрк╛рк│рк╡ркгрлА', description: 'рк╕рк╛ркзркирлЛ ркЕркирлЗ рк╕рк╛ркИркЯркирлА ркЬрк╛рк│рк╡ркгрлА' },
      { id: 'planning', title: 'ЁЯУЛ ркЖркпрлЛркЬрки', description: 'рккрлНрк░рлЛркЬрлЗркХрлНркЯ ркЖркпрлЛркЬрки ркЕркирлЗ рк╕ркВркХрк▓рки' },
      { id: 'other', title: 'ЁЯУЭ ркЕркирлНркп', description: 'ркЕркирлНркп ркХрк╛ркоркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУ' }
    ];

    await whatsappService.sendListMessage(
      phone,
      "ркдркорлЗ ркХркпрк╛ рккрлНрк░ркХрк╛рк░ркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ ркХрк░рлА?",
      "рккрлНрк░рк╡рлГркдрлНркдрк┐ рккрк╕ркВркж ркХрк░рлЛ",
      [{
        title: "рккрлНрк░рк╡рлГркдрлНркдрк┐ркирк╛ рккрлНрк░ркХрк╛рк░рлЛ",
        rows: activityTypes
      }]
    );
  }

  private async completeActivityLog(phone: string, activityData: any) {
    try {
      // Get user to link activity
      const user = await this.userService.getUserByPhone(phone);
      
      console.log('ЁЯФз [EMPLOYEE] Completing activity log with data:', {
        site_id: activityData.site_id,
        selected_site: activityData.selected_site,
        activity_type: activityData.activity_type,
        hours: activityData.hours,
        is_admin_impersonation: activityData.is_admin_impersonation
      });
      
      // Validate site ID before proceeding
      const siteId = activityData.site_id || activityData.selected_site;
      if (!siteId) {
        console.error('тЪая╕П [EMPLOYEE] No site ID found in activity data');
        throw new Error('Site ID is missing from activity data');
      }
      
      console.log('ЁЯФз [EMPLOYEE] Converting site ID:', siteId);
      const siteUUID = this.getSiteUUID(siteId);
      console.log('ЁЯФз [EMPLOYEE] Site UUID after conversion:', siteUUID);
      
      // Prepare activity details
      const activityDetails: any = { 
        logged_via: 'whatsapp',
        language: 'gujarati'
      };

      // Add image information if available
      if (activityData.image_info) {
        activityDetails.work_photo = activityData.image_info;
      }

      // Create activity in database
      const activity = await getDb().insert(activities).values({
        user_id: user!.id,
        site_id: siteUUID,
        activity_type: activityData.activity_type,
        hours: activityData.hours,
        description: activityData.description,
        image_url: activityData.image_info?.url || null,
        image_key: activityData.image_info?.key || null,
        details: activityDetails
      }).returning();

      // Handle session clearing based on admin impersonation
      if (activityData.is_admin_impersonation) {
        console.log('ЁЯФз [EMPLOYEE] Admin impersonation detected, preserving admin context');
        // Don't clear session completely for admin impersonation, just reset the employee flow part
        await this.updateSession(phone, {
          intent: 'impersonate_employee',
          step: 'active',
          data: {
            original_role: 'admin',
            is_admin_impersonation: true,
            selected_site: activityData.selected_site,
            site_selection_shown: true,
            // Clear activity-specific data
            activity_type: undefined,
            hours: undefined,
            description: undefined,
            image_info: undefined
          }
        });
      } else {
        // Clear session for regular employees
        await this.clearSession(phone);
      }

      // Send confirmation
      const imageStatus = activityData.image_info ? 'ЁЯУ╕ рклрлЛркЯрлЛ рк╕рк╣рк┐ркд' : 'ЁЯУЭ рклрлЛркЯрлЛ рк╡ркЧрк░';
      const confirmationMessage = `тЬЕ *рккрлНрк░рк╡рлГркдрлНркдрк┐ рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ ркирлЛркВркзрк╛ркИ!*

ЁЯУЛ *рк╡рк┐ркЧркдрлЛ:*
тАв рк╕рк╛ркИркЯ: ${await this.getSiteName(siteUUID)}
тАв рккрлНрк░рк╡рлГркдрлНркдрк┐: ${this.formatActivityType(activityData.activity_type || '')}
тАв ркХрк▓рк╛ркХрлЛ: ${activityData.hours}
тАв рк╡рк░рлНркгрки: ${activityData.description || 'ркХрлЛркИ рк╡рк░рлНркгрки ркиркерлА'}
тАв ${imageStatus}

*рккрлНрк░рк╡рлГркдрлНркдрк┐ ID:* ${activity[0].id.slice(0, 8)}

${activityData.is_admin_impersonation ? 
  'Test completed! Type *exit* to return to admin panel or continue testing employee features.' :
  'ркорлБркЦрлНркп ркорлЗркирлБ рккрк░ ркЬрк╡рк╛ ркорк╛ркЯрлЗ *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ.'
}`;

      await whatsappService.sendTextMessage(phone, confirmationMessage);

    } catch (error) {
      console.error('Error logging activity:', error);
      
      // Provide more specific error messages
      let errorMessage = "ркорк╛ркл ркХрк░рк╢рлЛ, ркдркорк╛рк░рлА рккрлНрк░рк╡рлГркдрлНркдрк┐ ркирлЛркВркзрк╡рк╛ркорк╛ркВ ркнрлВрк▓ ркеркИ.";
      
      if (error instanceof Error) {
        if (error.message.includes('Site ID')) {
          errorMessage += " рк╕рк╛ркИркЯ ID рк╕рк╛ркерлЗ рк╕ркорк╕рлНркпрк╛ ркЫрлЗ.";
        } else if (error.message.includes('foreign key constraint')) {
          errorMessage += " ркЕркорк╛ркирлНркп рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЗрк▓ ркЫрлЗ.";
        }
      }
      
      errorMessage += " ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.";
      
      await whatsappService.sendTextMessage(phone, errorMessage);
      
      // Handle session clearing on error
      if (activityData.is_admin_impersonation) {
        await this.updateSession(phone, {
          intent: 'impersonate_employee',
          step: 'active',
          data: {
            original_role: 'admin',
            is_admin_impersonation: true,
            selected_site: activityData.selected_site,
            site_selection_shown: true
          }
        });
      } else {
        await this.clearSession(phone);
      }
    }
  }

  private async startInvoiceTracking(phone: string) {
    const session = (await getDb().select().from(sessions).where(eq(sessions.phone, phone)))[0];
    const currentData = session?.data as EmployeeSessionData;

    await this.updateSession(phone, {
      intent: 'track_invoices',
      step: 'enter_company_name',
      data: {
        ...currentData,
        // Ensure admin impersonation flag is preserved
        is_admin_impersonation: currentData?.is_admin_impersonation || false
      }
    });

    await whatsappService.sendTextMessage(phone, "ЁЯз╛ *ркЗркирлНрк╡рлЙркЗрк╕ ркЯрлНрк░рлЗркХрк┐ркВркЧ*\n\nркХркпрк╛ ркХркВрккркирлАркирлБркВ ркЗркирлНрк╡рлЙркЗрк╕ ркЫрлЗ? ркХркВрккркирлАркирлБркВ ркирк╛рко рк▓ркЦрлЛ:");
  }

  private async handleInvoiceTracking(phone: string, session: any, messageText: string, imageData?: ImageMessage) {
    const currentData = session.data || {};

    switch (session.step) {
      case 'enter_company_name':
        if (!messageText.trim()) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХркВрккркирлАркирлБркВ ркирк╛рко рк▓ркЦрлЛ:");
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_invoice_description',
          data: { ...currentData, company_name: messageText.trim() }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУЭ ркЖ ркЗркирлНрк╡рлЙркЗрк╕ рк╢рлЗркирк╛ ркорк╛ркЯрлЗ ркЫрлЗ? (ркЬрлЗрко ркХрлЗ: рк╕рк╛ркоркЧрлНрк░рлА ркЦрк░рлАркжрлА, рк╕рлЗрк╡рк╛, рк╡рк┐ркжрлНркпрлБркд ркмрк┐рк▓, рк╡ркЧрлЗрк░рлЗ):");
        break;

      case 'enter_invoice_description':
        if (!messageText.trim()) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркЗркирлНрк╡рлЙркЗрк╕ркирлБркВ рк╡рк░рлНркгрки рк▓ркЦрлЛ:");
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_invoice_date',
          data: { ...currentData, invoice_description: messageText.trim() }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУЕ ркЗркирлНрк╡рлЙркЗрк╕ркирлА ркдрк╛рк░рлАркЦ ркХркИ ркЫрлЗ? (DD/MM/YYYY рклрлЛрк░рлНркорлЗркЯркорк╛ркВ рк▓ркЦрлЛ, ркЬрлЗрко ркХрлЗ: 15/12/2024):");
        break;

      case 'enter_invoice_date':
        const datePattern = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/;
        const dateMatch = messageText.trim().match(datePattern);
        
        if (!dateMatch) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп ркдрк╛рк░рлАркЦ рк▓ркЦрлЛ (DD/MM/YYYY рклрлЛрк░рлНркорлЗркЯркорк╛ркВ), ркЬрлЗрко ркХрлЗ: 15/12/2024:");
          return;
        }

        const [, day, month, year] = dateMatch;
        const invoiceDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
        
        if (isNaN(invoiceDate.getTime()) || invoiceDate > new Date()) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп ркдрк╛рк░рлАркЦ рк▓ркЦрлЛ (ркнрк╡рк┐рк╖рлНркпркирлА ркдрк╛рк░рлАркЦ рки рк╣рлЛрк╡рлА ркЬрлЛркИркП):");
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_amount',
          data: { ...currentData, invoice_date: invoiceDate }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯТ░ ркЗркирлНрк╡рлЙркЗрк╕ркирлА рк░ркХрко ркХрлЗркЯрк▓рлА ркЫрлЗ? (ркорк╛ркдрлНрк░ ркиркВркмрк░ рк▓ркЦрлЛ, ркЬрлЗрко ркХрлЗ: 5000):");
        break;

      case 'enter_amount':
        const amount = parseFloat(messageText.trim());
        
        if (isNaN(amount) || amount <= 0) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп рк░ркХрко рк▓ркЦрлЛ (ркорк╛ркдрлНрк░ ркиркВркмрк░, ркЬрлЗрко ркХрлЗ: 5000):");
          return;
        }

        await this.updateSession(phone, {
          step: 'select_site',
          data: { ...currentData, amount: Math.round(amount * 100) } // Store in paise
        });

        await this.showSiteSelection(phone);
        break;

      case 'select_site':
        // Validate that the selected site exists in database
        try {
          const selectedSite = await getDb()
            .select()
            .from(sites)
            .where(eq(sites.id, messageText))
            .limit(1);
            
          if (selectedSite.length === 0) {
            await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрк╛ркжрлАркорк╛ркВркерлА ркпрлЛркЧрлНркп рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ:");
            await this.showSiteSelection(phone);
            return;
          }
        } catch (error) {
          console.error('Error validating site selection:', error);
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрк╛ркжрлАркорк╛ркВркерлА ркпрлЛркЧрлНркп рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ:");
          await this.showSiteSelection(phone);
          return;
        }

        await this.updateSession(phone, {
          step: 'upload_invoice_image',
          data: { ...currentData, site_id: messageText, upload_retry_count: 0 }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУ╕ *рк╣рк╡рлЗ ркЗркирлНрк╡рлЙркЗрк╕ркирлЛ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ:*\n\nтАв рк╕рлНрккрк╖рлНркЯ ркЕркирлЗ рк╡рк╛ркВркЪрлА рк╢ркХрк╛ркп ркдрлЗрк╡рлЛ рклрлЛркЯрлЛ\nтАв ркЗркирлНрк╡рлЙркЗрк╕ркирк╛ ркмркзрк╛ ркнрк╛ркЧрлЛ ркжрлЗркЦрк╛ркдрк╛ рк╣рлЛрк╡рк╛ ркЬрлЛркИркП\nтАв рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ ркЕркерк╡рк╛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ");
        break;

      case 'upload_invoice_image':
        await this.handleImageUpload(phone, currentData, messageText, imageData, 'invoices', 'ркЗркирлНрк╡рлЙркЗрк╕ркирлЛ рклрлЛркЯрлЛ', this.completeInvoiceTracking.bind(this));
        break;

      default:
        // Handle null step - start the invoice tracking flow
        console.log('ЁЯОп [EMPLOYEE] Starting invoice tracking flow - no step found');
        await this.updateSession(phone, {
          step: 'enter_company_name',
          data: { ...currentData }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯз╛ *ркЗркирлНрк╡рлЙркЗрк╕ ркЯрлНрк░рлЗркХрк┐ркВркЧ*\n\nркХркпрк╛ ркХркВрккркирлАркирлБркВ ркЗркирлНрк╡рлЙркЗрк╕ ркЫрлЗ? ркХркВрккркирлАркирлБркВ ркирк╛рко рк▓ркЦрлЛ:");
        break;
    }
  }

  private async completeInvoiceTracking(phone: string, invoiceData: any) {
    try {
      const user = await this.userService.getUserByPhone(phone);
      
      const invoice = await getDb().insert(invoices).values({
        user_id: user!.id,
        company_name: invoiceData.company_name,
        invoice_description: invoiceData.invoice_description,
        invoice_date: invoiceData.invoice_date,
        amount: invoiceData.amount,
        site_id: this.getSiteUUID(invoiceData.site_id),
        image_url: invoiceData.image_info?.url || null,
        image_key: invoiceData.image_info?.key || null,
        notes: 'WhatsApp ркжрлНрк╡рк╛рк░рк╛ ркирлЛркВркзрк╛ркпрлЗрк▓'
      }).returning();

      // Handle session clearing based on admin impersonation
      if (invoiceData.is_admin_impersonation) {
        console.log('ЁЯФз [EMPLOYEE] Admin impersonation detected, preserving admin context');
        // Don't clear session completely for admin impersonation, just reset the employee flow part
        await this.updateSession(phone, {
          intent: 'impersonate_employee',
          step: 'active',
          data: {
            original_role: 'admin',
            is_admin_impersonation: true,
            selected_site: invoiceData.selected_site,
            site_selection_shown: true,
            // Clear invoice-specific data
            company_name: undefined,
            invoice_description: undefined,
            invoice_date: undefined,
            amount: undefined,
            image_info: undefined
          }
        });
      } else {
        // Clear session for regular employees
        await this.clearSession(phone);
      }

      const imageStatus = invoiceData.image_info ? 'ЁЯУ╕ рклрлЛркЯрлЛ рк╕рк╣рк┐ркд' : 'ЁЯУЭ рклрлЛркЯрлЛ рк╡ркЧрк░';
      const confirmationMessage = `тЬЕ *ркЗркирлНрк╡рлЙркЗрк╕ рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ ркирлЛркВркзрк╛ркпрлБркВ!*

ЁЯз╛ *ркЗркирлНрк╡рлЙркЗрк╕ркирлА рк╡рк┐ркЧркдрлЛ:*
тАв ркХркВрккркирлА: ${invoiceData.company_name}
тАв рк╡рк░рлНркгрки: ${invoiceData.invoice_description}
тАв ркдрк╛рк░рлАркЦ: ${invoiceData.invoice_date.toLocaleDateString('gu-IN')}
тАв рк░ркХрко: тВ╣${(invoiceData.amount / 100).toFixed(2)}
тАв рк╕рк╛ркИркЯ: ${await this.getSiteName(invoiceData.site_id)}
тАв ${imageStatus}

*ркЗркирлНрк╡рлЙркЗрк╕ ID:* ${invoice[0].id.slice(0, 8)}

ркдркорк╛рк░рлЛ ркЗркирлНрк╡рлЙркЗрк╕ ркПркХрк╛ркЙркирлНркЯрк┐ркВркЧ ркЯрлАркоркирлЗ ркорлЛркХрк▓рлА ркжрлЗрк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлЛ ркЫрлЗ. рккрлНрк░рлЛрк╕рлЗрк╕рк┐ркВркЧ рк╕рлНркЯрлЗркЯрк╕ рк╡рк┐рк╢рлЗ ркдркоркирлЗ ркЬрк╛ркг ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рк╢рлЗ.

${invoiceData.is_admin_impersonation ? 
  'Test completed! Type *exit* to return to admin panel or continue testing employee features.' :
  'ркорлБркЦрлНркп ркорлЗркирлБ рккрк░ ркЬрк╡рк╛ ркорк╛ркЯрлЗ *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ.'
}`;

      await whatsappService.sendTextMessage(phone, confirmationMessage);

    } catch (error) {
      console.error('Error tracking invoice:', error);
      await whatsappService.sendTextMessage(phone, "ркорк╛ркл ркХрк░рк╢рлЛ, ркдркорк╛рк░рлЛ ркЗркирлНрк╡рлЙркЗрк╕ ркирлЛркВркзрк╡рк╛ркорк╛ркВ ркнрлВрк▓ ркеркИ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.");
      
      // Handle session clearing on error
      if (invoiceData.is_admin_impersonation) {
        await this.updateSession(phone, {
          intent: 'impersonate_employee',
          step: 'active',
          data: {
            original_role: 'admin',
            is_admin_impersonation: true,
            selected_site: invoiceData.selected_site,
            site_selection_shown: true
          }
        });
      } else {
        await this.clearSession(phone);
      }
    }
  }

  private async showDashboard(phone: string) {
    try {
      const user = await this.userService.getUserByPhone(phone);
      
      // Get recent activities (last 7 days)
      const recentActivities = await getDb()
        .select()
        .from(activities)
        .where(eq(activities.user_id, user!.id))
        .limit(5);

      // Get pending material requests
      const pendingRequests = await getDb()
        .select()
        .from(material_requests)
        .where(eq(material_requests.user_id, user!.id))
        .limit(3);

      // Get recent invoices (last 5)
      const recentInvoices = await getDb()
        .select()
        .from(invoices)
        .where(eq(invoices.user_id, user!.id))
        .limit(5);

      const totalHours = recentActivities.reduce((sum, activity) => sum + (activity.hours || 0), 0);
      const totalInvoiceAmount = recentInvoices.reduce((sum, invoice) => sum + (invoice.amount || 0), 0);

      const dashboardMessage = `ЁЯУК *ркдркорк╛рк░рлБркВ ркбрлЗрк╢ркмрлЛрк░рлНркб*

ЁЯУЕ *ркЖ ркЕркарк╡рк╛ркбрк┐ркпрлЗ:*
тАв ркХрлБрк▓ ркирлЛркВркзрк╛ркпрлЗрк▓рк╛ ркХрк▓рк╛ркХрлЛ: ${totalHours}
тАв ркирлЛркВркзрк╛ркпрлЗрк▓рлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУ: ${recentActivities.length}
тАв ркмрк╛ркХрлА рк╡рк┐ркиркВркдрлАркУ: ${pendingRequests.length}
тАв ркирлЛркВркзрк╛ркпрлЗрк▓рк╛ ркЗркирлНрк╡рлЙркЗрк╕: ${recentInvoices.length}
тАв ркХрлБрк▓ ркЗркирлНрк╡рлЙркЗрк╕ рк░ркХрко: тВ╣${(totalInvoiceAmount / 100).toFixed(2)}

ЁЯУЭ *ркдрк╛ркЬрлЗркдрк░ркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУ:*
${recentActivities.map(activity => 
  `тАв ${this.formatActivityType(activity.activity_type || '')} - ${activity.hours}ркХрк▓`
).join('\n') || 'ркХрлЛркИ ркдрк╛ркЬрлЗркдрк░ркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУ ркиркерлА'}

ЁЯУж *ркмрк╛ркХрлА рк╕рк╛ркоркЧрлНрк░рлАркирлА рк╡рк┐ркиркВркдрлАркУ:*
${pendingRequests.map(request => 
  `тАв ${request.material_name} (${request.status})`
).join('\n') || 'ркХрлЛркИ ркмрк╛ркХрлА рк╡рк┐ркиркВркдрлАркУ ркиркерлА'}

ЁЯз╛ *ркЫрлЗрк▓рлНрк▓рк╛ ркЗркирлНрк╡рлЙркЗрк╕:*
${recentInvoices.map(invoice => 
  `тАв ${invoice.company_name} - тВ╣${(invoice.amount / 100).toFixed(2)}`
).join('\n') || 'ркХрлЛркИ ркирлЛркВркзрк╛ркпрлЗрк▓рк╛ ркЗркирлНрк╡рлЙркЗрк╕ ркиркерлА'}

рк╡ркзрлБ рк╡рк┐ркХрк▓рлНрккрлЛ ркорк╛ркЯрлЗ *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ.`;

      await whatsappService.sendTextMessage(phone, dashboardMessage);

    } catch (error) {
      console.error('Error fetching dashboard:', error);
      await whatsappService.sendTextMessage(phone, "ркорк╛ркл ркХрк░рк╢рлЛ, ркдркорк╛рк░рлБркВ ркбрлЗрк╢ркмрлЛрк░рлНркб рк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркнрлВрк▓ ркеркИ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.");
    }
  }

  // Helper methods - now fully dynamic
  private async getSiteName(siteId: string | undefined): Promise<string> {
    if (!siteId) return 'ркЕркЬрлНркЮрк╛ркд рк╕рк╛ркИркЯ';
    
    try {
      const site = await getDb()
        .select()
        .from(sites)
        .where(eq(sites.id, siteId))
        .limit(1);
      
      return site[0]?.name || 'ркЕркЬрлНркЮрк╛ркд рк╕рк╛ркИркЯ';
    } catch (error) {
      console.error('Error fetching site name:', error);
      return 'ркЕркЬрлНркЮрк╛ркд рк╕рк╛ркИркЯ';
    }
  }

  private getSiteUUID(displayId: string | undefined): string {
    // If it's already a UUID, return as is
    if (displayId && displayId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
      return displayId;
    }
    
    if (!displayId) {
      console.error('тЪая╕П [EMPLOYEE] No site ID provided to getSiteUUID');
      throw new Error('Site ID is required for activity logging');
    }
    
    // Handle double prefix case: 'site_site_1' -> 'site_1'
    let normalizedId = displayId;
    if (displayId.startsWith('site_site_')) {
      normalizedId = displayId.replace('site_site_', 'site_');
      console.log('ЁЯФз [EMPLOYEE] Normalizing double-prefixed site ID:', displayId, 'тЖТ', normalizedId);
    }
    
    // For legacy compatibility, but this should not be used anymore with dynamic site selection
    const siteMapping: { [key: string]: string } = {
      'site_1': '11111111-1111-1111-1111-111111111111',
      'site_2': '22222222-2222-2222-2222-222222222222',
      'site_3': '33333333-3333-3333-3333-333333333333'
    };
    
    const mappedId = siteMapping[normalizedId];
    if (mappedId) {
      console.log('ЁЯФз [EMPLOYEE] Using legacy site mapping:', normalizedId, 'тЖТ', mappedId);
      return mappedId;
    }
    
    // If we get here, it means we have an invalid site ID
    console.error('тЪая╕П [EMPLOYEE] Invalid site ID provided:', displayId, 'normalized to:', normalizedId);
    throw new Error(`Invalid site ID: ${displayId} (normalized: ${normalizedId})`);
  }

  private formatActivityType(type: string): string {
    const types: { [key: string]: string } = {
      'construction': 'ЁЯФи ркмрк╛ркВркзркХрк╛рко',
      'inspection': 'ЁЯФН ркдрккрк╛рк╕',
      'maintenance': 'ЁЯФз ркЬрк╛рк│рк╡ркгрлА',
      'planning': 'ЁЯУЛ ркЖркпрлЛркЬрки',
      'other': 'ЁЯУЭ ркЕркирлНркп'
    };
    return types[type] || type;
  }

  // Centralized image upload handler with improved error handling
  private async handleImageUpload(
    phone: string, 
    currentData: any, 
    messageText: string, 
    imageData?: ImageMessage,
    folderName: string = 'activities',
    photoDescription: string = 'рклрлЛркЯрлЛ',
    completionHandler?: (phone: string, data: any) => Promise<void>
  ) {
    const retryCount = currentData.upload_retry_count || 0;
    
    if (imageData) {
      // Validate image before upload
      if (!this.validateImageData(imageData)) {
        await whatsappService.sendTextMessage(phone, "тЭМ ркЕркпрлЛркЧрлНркп рклрлЛркЯрлЛ рклрлЛрк░рлНркорлЗркЯ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ JPEG ркЕркерк╡рк╛ PNG рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ ркЕркерк╡рк╛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ.");
        return;
      }

      await whatsappService.sendTextMessage(phone, `ЁЯУд ${photoDescription} ркЕрккрк▓рлЛркб ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...`);
      
      try {
        // Set timeout for upload
        const uploadPromise = r2Service.uploadFromWhatsAppMedia(
          imageData.id,
          process.env.META_WHATSAPP_TOKEN!,
          folderName
        );
        
        const timeoutPromise = new Promise<never>((_, reject) =>
          setTimeout(() => reject(new Error('Upload timeout')), this.UPLOAD_TIMEOUT_MS)
        );
        
        const uploadResult = await Promise.race([uploadPromise, timeoutPromise]);
        
        if (uploadResult.success) {
          const imageInfo = {
            url: uploadResult.url,
            key: uploadResult.key,
            caption: imageData.caption || photoDescription,
            whatsapp_media_id: imageData.id,
            mime_type: imageData.mime_type,
            sha256: imageData.sha256
          };
          
          await whatsappService.sendTextMessage(phone, "тЬЕ рклрлЛркЯрлЛ рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ ркЕрккрк▓рлЛркб ркеркпрлЛ!");
          
          if (completionHandler) {
            await completionHandler(phone, { ...currentData, image_info: imageInfo });
          }
        } else {
          throw new Error(uploadResult.error || 'Unknown upload error');
        }
        
      } catch (error) {
        console.error('R2 upload error:', error);
        
        if (retryCount < this.MAX_UPLOAD_RETRIES) {
          // Allow retry
          await this.updateSession(phone, {
            data: { ...currentData, upload_retry_count: retryCount + 1 }
          });
          
          const errorMessage = error instanceof Error && error.message === 'Upload timeout' 
            ? "тП░ ркЕрккрк▓рлЛркб ркЯрк╛ркИркоркЖркЙркЯ ркеркпрлЛ."
            : "тЭМ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркнрлВрк▓.";
            
          await whatsappService.sendTextMessage(phone, 
            `${errorMessage} ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ (${retryCount + 1}/${this.MAX_UPLOAD_RETRIES + 1}) ркЕркерк╡рк╛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ.`
          );
        } else {
          // Max retries reached
          await whatsappService.sendTextMessage(phone, 
            "тЭМ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ рк╡рк╛рк░ркВрк╡рк╛рк░ ркирк┐рк╖рлНрклрк│ркдрк╛. 'skip' ркЯрк╛ркИркк ркХрк░рлАркирлЗ ркЖркЧрк│ рк╡ркзрлЛ ркЕркерк╡рк╛ рккркЫрлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ."
          );
        }
        return;
      }
      
    } else if (messageText.toLowerCase() === 'skip') {
      if (completionHandler) {
        await completionHandler(phone, { ...currentData, image_info: null });
      }
    } else {
      await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ ркЕркерк╡рк╛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ:");
      return;
    }
  }

  // Image validation helper
  private validateImageData(imageData: ImageMessage): boolean {
    if (!imageData || !imageData.id) {
      return false;
    }
    
    // Check MIME type if available
    if (imageData.mime_type) {
      const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
      if (!validTypes.includes(imageData.mime_type.toLowerCase())) {
        return false;
      }
    }
    
    return true;
  }

  private async handleMaterialRequest(phone: string, session: any, messageText: string, imageData?: ImageMessage) {
    const currentData = session.data || {};

    switch (session.step) {
      case 'enter_material':
        if (messageText.length < 2) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп рк╕рк╛ркоркЧрлНрк░рлАркирлБркВ ркирк╛рко ркжрк╛ркЦрк▓ ркХрк░рлЛ:");
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_quantity',
          data: { ...currentData, material_name: messageText }
        });

        await whatsappService.sendTextMessage(phone, "ркХрлЗркЯрк▓рлА ркорк╛ркдрлНрк░рк╛ркорк╛ркВ ркЬрлЛркИркП ркЫрлЗ? (ркЬрлЗрко ркХрлЗ, 10 ркмрлЗркЧ, 5 ркЯрки, 100 рккрлАрк╕):");
        break;

      case 'enter_quantity':
        const quantityMatch = messageText.match(/(\d+)\s*(.+)/);
        if (!quantityMatch) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркЖ рклрлЛрк░рлНркорлЗркЯркорк╛ркВ ркорк╛ркдрлНрк░рк╛ ркжрк╛ркЦрк▓ ркХрк░рлЛ: '10 ркмрлЗркЧ' ркЕркерк╡рк╛ '5 ркЯрки':");
          return;
        }

        const quantity = parseInt(quantityMatch[1]);
        const unit = quantityMatch[2].trim();

        await this.updateSession(phone, {
          step: 'select_urgency',
          data: { ...currentData, quantity, unit }
        });

        await this.showUrgencyOptions(phone);
        break;

      case 'select_urgency':
        const validUrgency = ['low', 'medium', 'high'];
        if (!validUrgency.includes(messageText)) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХркдрк╛ркирлБркВ рк╕рлНркдрк░ рккрк╕ркВркж ркХрк░рлЛ:");
          await this.showUrgencyOptions(phone);
          return;
        }

        await this.updateSession(phone, {
          step: 'upload_material_image',
          data: { ...currentData, urgency: messageText, upload_retry_count: 0 }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУ╕ ркХрлГрккрк╛ ркХрк░рлАркирлЗ рк╕рк╛ркоркЧрлНрк░рлАркирлЛ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ:\n\nтАв ркЬрк░рлВрк░рлА рк╕рк╛ркоркЧрлНрк░рлАркирлЛ рклрлЛркЯрлЛ\nтАв рк╣рк╛рк▓ркирлА рк╕рк╛ркоркЧрлНрк░рлАркирлА рк╕рлНркерк┐ркдрк┐ркирлЛ рклрлЛркЯрлЛ\nтАв ркХрлЛркИ рклрлЛркЯрлЛ рки рк╣рлЛркп ркдрлЛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ");
        break;

      case 'upload_material_image':
        await this.handleImageUpload(phone, currentData, messageText, imageData, 'material-requests', 'рк╕рк╛ркоркЧрлНрк░рлАркирлЛ рклрлЛркЯрлЛ', this.completeMaterialRequest.bind(this));
        break;

      default:
        // Handle null step - start the material request flow
        console.log('ЁЯОп [EMPLOYEE] Starting material request flow - no step found');
        await this.updateSession(phone, {
          step: 'enter_material',
          data: { ...currentData }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУж *рк╕рк╛ркоркЧрлНрк░рлАркирлА рк╡рк┐ркиркВркдрлА*\n\nркХркИ рк╕рк╛ркоркЧрлНрк░рлАркирлА ркЬрк░рлВрк░ ркЫрлЗ? (ркЬрлЗрко ркХрлЗ: рк╕рк┐ркорлЗркирлНркЯ, ркИркВркЯ, рк░рлЛркб, ркмрлЗркЧ, рк╡ркЧрлЗрк░рлЗ):");
        break;
    }
  }

  private async showUrgencyOptions(phone: string) {
    const urgencyLevels = [
      { id: 'low', title: 'ЁЯЯв ркУркЫрлА рккрлНрк░рк╛ркеркорк┐ркХркдрк╛', description: 'ркПркХ ркЕркарк╡рк╛ркбрк┐ркпрк╛ркорк╛ркВ ркЬрлЛркИркП ркЫрлЗ' },
      { id: 'medium', title: 'ЁЯЯб ркоркзрлНркпрко рккрлНрк░рк╛ркеркорк┐ркХркдрк╛', description: '2-3 ркжрк┐рк╡рк╕ркорк╛ркВ ркЬрлЛркИркП ркЫрлЗ' },
      { id: 'high', title: 'ЁЯФ┤ ркЙркЪрлНркЪ рккрлНрк░рк╛ркеркорк┐ркХркдрк╛', description: 'ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХ ркЬрлЛркИркП ркЫрлЗ (ркЖркЬ/ркЖрк╡ркдрлАркХрк╛рк▓рлЗ)' }
    ];

    await whatsappService.sendListMessage(
      phone,
      "ркЖ рк╡рк┐ркиркВркдрлА ркХрлЗркЯрк▓рлА ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХ ркЫрлЗ?",
      "ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХркдрк╛ рккрк╕ркВркж ркХрк░рлЛ",
      [{
        title: "ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХркдрк╛ркирк╛ рк╕рлНркдрк░рлЛ",
        rows: urgencyLevels
      }]
    );
  }

  private async completeMaterialRequest(phone: string, requestData: any) {
    try {
      const user = await this.userService.getUserByPhone(phone);
      
      const request = await getDb().insert(material_requests).values({
        user_id: user!.id,
        material_name: requestData.material_name,
        quantity: requestData.quantity,
        unit: requestData.unit,
        site_id: this.getSiteUUID(requestData.site_id),
        urgency: requestData.urgency,
        requested_date: new Date(),
        image_url: requestData.image_info?.url || null,
        image_key: requestData.image_info?.key || null,
        notes: 'WhatsApp ркжрлНрк╡рк╛рк░рк╛ рк╡рк┐ркиркВркдрлА'
      }).returning();

      // Handle session clearing based on admin impersonation
      if (requestData.is_admin_impersonation) {
        console.log('ЁЯФз [EMPLOYEE] Admin impersonation detected, preserving admin context');
        // Don't clear session completely for admin impersonation, just reset the employee flow part
        await this.updateSession(phone, {
          intent: 'impersonate_employee',
          step: 'active',
          data: {
            original_role: 'admin',
            is_admin_impersonation: true,
            selected_site: requestData.selected_site,
            site_selection_shown: true,
            // Clear material request-specific data
            material_name: undefined,
            quantity: undefined,
            unit: undefined,
            urgency: undefined,
            image_info: undefined
          }
        });
      } else {
        // Clear session for regular employees
        await this.clearSession(phone);
      }

      const imageStatus = requestData.image_info ? 'ЁЯУ╕ рклрлЛркЯрлЛ рк╕рк╣рк┐ркд' : 'ЁЯУЭ рклрлЛркЯрлЛ рк╡ркЧрк░';
      const confirmationMessage = `тЬЕ *рк╕рк╛ркоркЧрлНрк░рлАркирлА рк╡рк┐ркиркВркдрлА ркорлЛркХрк▓рк╛ркИ ркЧркИ!*

ЁЯУж *рк╡рк┐ркиркВркдрлАркирлА рк╡рк┐ркЧркдрлЛ:*
тАв рк╕рк╛ркоркЧрлНрк░рлА: ${requestData.material_name}
тАв ркорк╛ркдрлНрк░рк╛: ${requestData.quantity} ${requestData.unit}
тАв рк╕рк╛ркИркЯ: ${await this.getSiteName(requestData.site_id)}
тАв ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХркдрк╛: ${this.formatUrgency(requestData.urgency)}
тАв ${imageStatus}

*рк╡рк┐ркиркВркдрлА ID:* ${request[0].id.slice(0, 8)}

ркдркорк╛рк░рлА рк╡рк┐ркиркВркдрлА ркЦрк░рлАркжрлА ркЯрлАркоркирлЗ ркорлЛркХрк▓рлА ркжрлЗрк╡рк╛ркорк╛ркВ ркЖрк╡рлА ркЫрлЗ. рк╕рлНркЯрлЗркЯрк╕ рк╡рк┐рк╢рлЗ ркдркоркирлЗ ркЬрк╛ркг ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рк╢рлЗ.

${requestData.is_admin_impersonation ? 
  'Test completed! Type *exit* to return to admin panel or continue testing employee features.' :
  'ркорлБркЦрлНркп ркорлЗркирлБ рккрк░ ркЬрк╡рк╛ ркорк╛ркЯрлЗ *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ.'
}`;

      await whatsappService.sendTextMessage(phone, confirmationMessage);

    } catch (error) {
      console.error('Error submitting material request:', error);
      await whatsappService.sendTextMessage(phone, "ркорк╛ркл ркХрк░рк╢рлЛ, ркдркорк╛рк░рлА рк╡рк┐ркиркВркдрлА ркорлЛркХрк▓рк╡рк╛ркорк╛ркВ ркнрлВрк▓ ркеркИ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.");
      
      // Handle session clearing on error
      if (requestData.is_admin_impersonation) {
        await this.updateSession(phone, {
          intent: 'impersonate_employee',
          step: 'active',
          data: {
            original_role: 'admin',
            is_admin_impersonation: true,
            selected_site: requestData.selected_site,
            site_selection_shown: true
          }
        });
      } else {
        await this.clearSession(phone);
      }
    }
  }

  private formatUrgency(urgency: string): string {
    const urgencyMap: { [key: string]: string } = {
      'low': 'ЁЯЯв ркУркЫрлА рккрлНрк░рк╛ркеркорк┐ркХркдрк╛',
      'medium': 'ЁЯЯб ркоркзрлНркпрко рккрлНрк░рк╛ркеркорк┐ркХркдрк╛',
      'high': 'ЁЯФ┤ ркЙркЪрлНркЪ рккрлНрк░рк╛ркеркорк┐ркХркдрк╛'
    };
    return urgencyMap[urgency] || urgency;
  }

  // Simplified showSiteSelection - only used for invoice tracking now
  private async showSiteSelection(phone: string) {
    try {
      console.log('ЁЯС╖тАНтЩВя╕П [EMPLOYEE] Showing site selection for invoice tracking');
      
      // Fetch active sites from database
      const activeSites = await getDb()
        .select()
        .from(sites)
        .where(eq(sites.status, 'active'));
      
      if (activeSites.length === 0) {
        await whatsappService.sendTextMessage(phone, 
          "тЭМ ркХрлЛркИ рк╕ркХрлНрк░рк┐ркп рк╕рк╛ркИркЯрлНрк╕ ркорк│рлА ркиркерлА. ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркПркбркорк┐ркиркирлЛ рк╕ркВрккрк░рлНркХ ркХрк░рлЛ."
        );
        return;
      }

      // Transform sites to WhatsApp list format
      const siteOptions = activeSites.map((site) => {
        const siteDetails = site.details as any;
        return {
          id: site.id, // Use actual UUID as ID
          title: `ЁЯПЧя╕П ${site.name}`,
          description: site.location || siteDetails?.description || 'рк╕рк╛ркИркЯ рк╡рк┐ркЧркд'
        };
      });

      await whatsappService.sendListMessage(
        phone,
        "ркХркпрк╛ рк╕рк╛ркИркЯ ркорк╛ркЯрлЗ ркЫрлЗ?",
        "рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ",
        [{
          title: "ркЙрккрк▓ркмрлНркз рк╕рк╛ркИркЯрлНрк╕",
          rows: siteOptions
        }]
      );
      
    } catch (error) {
      console.error('Error showing site selection:', error);
      await whatsappService.sendTextMessage(phone, 
        "тЭМ рк╕рк╛ркИркЯрлНрк╕ рк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркнрлВрк▓. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ."
      );
    }
  }
} 