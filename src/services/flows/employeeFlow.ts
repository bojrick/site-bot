import { getDb } from '../../db';
import { activities, material_requests, sites, sessions } from '../../db/schema';
import { eq } from 'drizzle-orm';
import { whatsappService, ImageMessage } from '../whatsapp';
import { UserService } from '../userService';
import { r2Service } from '../cloudflareR2';
import process from 'process';

export class EmployeeFlow {
  private userService: UserService;

  constructor() {
    this.userService = new UserService();
  }

  async handleMessage(
    user: any,
    session: any,
    messageText: string,
    interactiveData?: any,
    imageData?: ImageMessage
  ) {
    const phone = user.phone;

    // Check if employee needs to be verified
    if (!user.is_verified) {
      await this.handleEmployeeVerification(user, messageText);
      return;
    }

    // Check if we're in the middle of a flow
    if (session.intent) {
      await this.handleFlowStep(user, session, messageText, interactiveData, imageData);
    } else {
      await this.handleMainMenu(user, messageText);
    }
  }

  // Add session management methods to this class
  async updateSession(phone: string, updates: Partial<typeof sessions.$inferInsert>) {
    await getDb()
      .update(sessions)
      .set({ ...updates, updated_at: new Date() })
      .where(eq(sessions.phone, phone));
  }

  async clearSession(phone: string) {
    await getDb()
      .update(sessions)
      .set({ 
        intent: null, 
        step: null, 
        data: {}, 
        updated_at: new Date() 
      })
      .where(eq(sessions.phone, phone));
  }

  private async handleEmployeeVerification(user: any, messageText: string) {
    const phone = user.phone;
    const text = messageText.trim();

    // Check if user is trying to send OTP
    if (/^\d{6}$/.test(text)) {
      const result = await this.userService.verifyOTPCode(phone, text);
      await whatsappService.sendTextMessage(phone, result.message);
      
      if (result.success) {
        // Show welcome message and main menu
        setTimeout(async () => {
          await this.showWelcomeMessage(phone);
        }, 1000);
      }
      return;
    }

    // Handle OTP requests
    if (text.toLowerCase().includes('otp') || text.toLowerCase().includes('resend') || text.toLowerCase().includes('code')) {
      const sent = await this.userService.generateAndSendOTP(phone);
      if (sent) {
        await whatsappService.sendTextMessage(phone, "ЁЯУ▓ ркирк╡рлЛ OTP ркорлЛркХрк▓рлНркпрлЛ ркЫрлЗ! ркХрлГрккрк╛ ркХрк░рлАркирлЗ 6-ркЕркВркХркирлЛ ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:");
      } else {
        await whatsappService.sendTextMessage(phone, "тЭМ OTP ркорлЛркХрк▓рк╡рк╛ркорк╛ркВ ркирк┐рк╖рлНрклрк│. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккркЫрлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.");
      }
      return;
    }

    // First time employee - send OTP
    const hasActiveOTP = await this.userService.hasActiveOTP(phone);
    if (!hasActiveOTP) {
      const sent = await this.userService.generateAndSendOTP(phone);
      if (sent) {
        const message = `ЁЯСЛ ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!

ЁЯФР рк╕рлБрк░ркХрлНрк╖рк╛ ркорк╛ркЯрлЗ, ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлБркВ ркПркХрк╛ркЙркирлНркЯ рк╡рлЗрк░рк┐рклрк╛ркИ ркХрк░рлЛ. ркорлЗркВ ркдркоркирлЗ 6-ркЕркВркХркирлЛ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки ркХрлЛркб ркорлЛркХрк▓рлНркпрлЛ ркЫрлЗ.

ркЖркЧрк│ рк╡ркзрк╡рк╛ ркорк╛ркЯрлЗ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:`;
        await whatsappService.sendTextMessage(phone, message);
      }
    } else {
      await whatsappService.sendTextMessage(phone, "ЁЯФР ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлЛ 6-ркЕркВркХркирлЛ рк╡рлЗрк░рк┐рклрк┐ркХрлЗрк╢рки ркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:\n\nркирк╡рлЛ ркХрлЛркб ркЬрлЛркИркП ркдрлЛ 'resend' ркЯрк╛ркИркк ркХрк░рлЛ.");
    }
  }

  private async showWelcomeMessage(phone: string) {
    const welcomeMessage = `ЁЯОЙ *ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!*

ркдркорлЗ рк╣рк╡рлЗ рк╡рлЗрк░рк┐рклрк╛ркИ ркеркИ ркЧркпрк╛ ркЫрлЛ ркЕркирлЗ ркЕркорк╛рк░рлА ркХрк░рлНркоркЪрк╛рк░рлА рк╕рлЗрк╡рк╛ркУркирлЛ ркЙрккркпрлЛркЧ ркХрк░рк╡рк╛ ркдрлИркпрк╛рк░ ркЫрлЛ.

ркЖркЬрлЗ ркдркорлЗ рк╢рлБркВ ркХрк░рк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?`;

    await whatsappService.sendTextMessage(phone, welcomeMessage);
    await this.showMainMenu(phone);
  }

  private async handleMainMenu(user: any, messageText: string) {
    const phone = user.phone;
    const text = messageText.toLowerCase().trim();

    // Handle common commands
    if (text === 'menu' || text === 'main' || text === 'start' || text === 'ркорлЗркирлБ') {
      await this.showMainMenu(phone);
      return;
    }

    if (text === 'help' || text === 'ркоркжркж') {
      await this.showHelp(phone);
      return;
    }

    // Handle main menu selections
    switch (text) {
      case 'log_activity':
      case '1':
        await this.startActivityLogging(phone);
        break;
      
      case 'request_materials':
      case '2':
        await this.startMaterialRequest(phone);
        break;
      
      case 'view_dashboard':
      case '3':
        await this.showDashboard(phone);
        break;
      
      case 'help':
      case '4':
        await this.showHelp(phone);
        break;

      default:
        await this.showMainMenu(phone);
        break;
    }
  }

  private async showMainMenu(phone: string) {
    const message = `ЁЯС╖тАНтЩВя╕П *ркХрк░рлНркоркЪрк╛рк░рлА рккрлЛрк░рлНркЯрк▓*

ркЖркЬрлЗ рк╣рлБркВ ркдркорк╛рк░рлА ркХрлЗрк╡рлА ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?`;

    const buttons = [
      { id: 'log_activity', title: 'ЁЯУЭ ркХрк╛ркоркирлА ркирлЛркВркз ркХрк░рлЛ' },
      { id: 'request_materials', title: 'ЁЯУж рк╕рк╛ркоркЧрлНрк░рлАркирлА ркорк╛ркВркЧ' },
      { id: 'view_dashboard', title: 'ЁЯУК ркбрлЗрк╢ркмрлЛрк░рлНркб ркЬрлБркУ' }
    ];

    await whatsappService.sendButtonMessage(phone, message, buttons);
    
    // Also send a list for more options
    setTimeout(async () => {
      await whatsappService.sendListMessage(
        phone,
        "рк╡ркзрк╛рк░рк╛ркирк╛ рк╡рк┐ркХрк▓рлНрккрлЛ:",
        "рк╡ркзрлБ рк╡рк┐ркХрк▓рлНрккрлЛ",
        [{
          title: "рк╕рк╣рк╛ркп",
          rows: [
            { id: 'help', title: 'тЭУ ркоркжркж', description: 'ркоркжркж ркЕркирлЗ рк╕рк╣рк╛ркп ркорлЗрк│рк╡рлЛ' },
            { id: 'contact_admin', title: 'ЁЯУЮ ркПркбркорк┐ркиркирлЛ рк╕ркВрккрк░рлНркХ', description: 'рк╡рк╣рлАрк╡ркЯрлАркдркВркдрлНрк░ркирлЛ рк╕ркВрккрк░рлНркХ ркХрк░рлЛ' }
          ]
        }]
      );
    }, 1000);
  }

  private async showHelp(phone: string) {
    const helpText = `ЁЯдЭ *ркХрк░рлНркоркЪрк╛рк░рлА ркоркжркж ркЕркирлЗ рк╕рк╣рк╛ркп*

*ркЙрккрк▓ркмрлНркз ркХркорк╛ркирлНркбрлНрк╕:*
тАв *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ - ркорлБркЦрлНркп ркорлЗркирлБ рккрк░ ркЬрк╛ркУ
тАв *рк▓рлЛркЧ* ркЯрк╛ркИркк ркХрк░рлЛ - ркЭркбрккркерлА рккрлНрк░рк╡рлГркдрлНркдрк┐ ркирлЛркВркзрк╡рлЛ
тАв *рк╕рк╛ркоркЧрлНрк░рлА* ркЯрк╛ркИркк ркХрк░рлЛ - рк╕рк╛ркоркЧрлНрк░рлАркирлА ркорк╛ркВркЧ
тАв *ркбрлЗрк╢ркмрлЛрк░рлНркб* ркЯрк╛ркИркк ркХрк░рлЛ - ркдркорк╛рк░рлБркВ ркбрлЗрк╢ркмрлЛрк░рлНркб ркЬрлБркУ

*ркоркжркж ркЬрлЛркИркП?*
тАв *ркПркбркорк┐рки* ркЯрк╛ркИркк ркХрк░рлЛ рк╡рк╣рлАрк╡ркЯрлАркдркВркдрлНрк░ркирлЛ рк╕ркВрккрк░рлНркХ ркХрк░рк╡рк╛
тАв рклрлЛрки: +91-XXXXXXXXXX (ркПркбркорк┐рки)

*ркХрк╛ркоркирк╛ ркХрк▓рк╛ркХрлЛ:*
рк╕рлЛркорк╡рк╛рк░ - рк╢ркирк┐рк╡рк╛рк░: рк╕рк╡рк╛рк░рлЗ 8:00 - рк╕рк╛ркВркЬрлЗ 6:00`;

    await whatsappService.sendTextMessage(phone, helpText);
  }

  private async startActivityLogging(phone: string) {
    // Initialize activity logging session
    await this.updateSession(phone, {
      intent: 'log_activity',
      step: 'select_site',
      data: {}
    });

    await this.showSiteSelection(phone);
  }

  private async showSiteSelection(phone: string) {
    // For now, we'll use mock data. In real implementation, fetch from sites table
    const sites = [
      { id: 'site_1', title: 'ЁЯПЧя╕П рк╕рк╛ркИркЯ A - рк░рк╣рлЗркарк╛ркг', description: 'ркорлБркЦрлНркп рк░рк╣рлЗркарк╛ркг рккрлНрк░рлЛркЬрлЗркХрлНркЯ' },
      { id: 'site_2', title: 'ЁЯПв рк╕рк╛ркИркЯ B - рк╡рк╛ркгрк┐ркЬрлНркпрк┐ркХ', description: 'ркУрклрк┐рк╕ ркХрлЛркорлНрккрлНрк▓рлЗркХрлНрк╕ рккрлНрк░рлЛркЬрлЗркХрлНркЯ' },
      { id: 'site_3', title: 'ЁЯПм рк╕рк╛ркИркЯ C - рк░рк┐ркЯрлЗрк▓', description: 'рк╢рлЛрккрк┐ркВркЧ рк╕рлЗркирлНркЯрк░ рккрлНрк░рлЛркЬрлЗркХрлНркЯ' }
    ];

    await whatsappService.sendListMessage(
      phone,
      "ркдркорлЗ ркЬрлНркпрк╛ркВ ркХрк╛рко ркХрк░рлНркпрлБркВ ркЫрлЗ ркдрлЗ рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ:",
      "рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ",
      [{
        title: "рк╕ркХрлНрк░рк┐ркп рк╕рк╛ркИркЯрлНрк╕",
        rows: sites
      }]
    );
  }

  private async handleFlowStep(
    user: any,
    session: any,
    messageText: string,
    interactiveData?: any,
    imageData?: ImageMessage
  ) {
    const phone = user.phone;

    if (session.intent === 'log_activity') {
      await this.handleActivityLogging(phone, session, messageText, imageData);
    } else if (session.intent === 'request_materials') {
      await this.handleMaterialRequest(phone, session, messageText, imageData);
    }
  }

  private async handleActivityLogging(phone: string, session: any, messageText: string, imageData?: ImageMessage) {
    const currentData = session.data || {};

    switch (session.step) {
      case 'select_site':
        if (!messageText.startsWith('site_')) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрк╛ркжрлАркорк╛ркВркерлА ркпрлЛркЧрлНркп рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ:");
          await this.showSiteSelection(phone);
          return;
        }

        await this.updateSession(phone, {
          step: 'select_activity_type',
          data: { ...currentData, site_id: messageText }
        });

        await this.showActivityTypes(phone);
        break;

      case 'select_activity_type':
        const validTypes = ['construction', 'inspection', 'maintenance', 'planning', 'other'];
        if (!validTypes.includes(messageText)) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп рккрлНрк░рк╡рлГркдрлНркдрк┐ркирлЛ рккрлНрк░ркХрк╛рк░ рккрк╕ркВркж ркХрк░рлЛ:");
          await this.showActivityTypes(phone);
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_hours',
          data: { ...currentData, activity_type: messageText }
        });

        await whatsappService.sendTextMessage(phone, "ркдркорлЗ ркХрлЗркЯрк▓рк╛ ркХрк▓рк╛ркХ ркХрк╛рко ркХрк░рлНркпрлБркВ? (ркиркВркмрк░ ркжрк╛ркЦрк▓ ркХрк░рлЛ):");
        break;

      case 'enter_hours':
        const hours = parseInt(messageText);
        if (isNaN(hours) || hours <= 0 || hours > 24) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп ркХрк▓рк╛ркХрлЛркирлА рк╕ркВркЦрлНркпрк╛ ркжрк╛ркЦрк▓ ркХрк░рлЛ (1-24):");
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_description',
          data: { ...currentData, hours }
        });

        await whatsappService.sendTextMessage(phone, "ркдркорлЗ рк╢рлБркВ ркХрк╛рко ркХрк░рлНркпрлБркВ ркдрлЗркирлБркВ рк╡рк░рлНркгрки ркХрк░рлЛ (рк╡рлИркХрк▓рлНрккрк┐ркХ - 'skip' ркЯрк╛ркИркк ркХрк░рлЛ ркЫрлЛркбрк╡рк╛ ркорк╛ркЯрлЗ):");
        break;

      case 'enter_description':
        const description = messageText.toLowerCase() === 'skip' ? '' : messageText;
        
        await this.updateSession(phone, {
          step: 'upload_image',
          data: { ...currentData, description }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУ╕ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХрк╛ркоркирлЛ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ:\n\nтАв ркХрк╛ркоркирлА рк╕рк╛ркИркЯркирлЛ рклрлЛркЯрлЛ\nтАв рккрлВрк░рлНркг ркеркпрлЗрк▓рк╛ ркХрк╛ркоркирлЛ рклрлЛркЯрлЛ\nтАв ркХрлЛркИ рклрлЛркЯрлЛ рки рк╣рлЛркп ркдрлЛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ");
        break;

      case 'upload_image':
        let imageInfo = null;
        
        if (imageData) {
          // Process the uploaded image and store in Cloudflare R2
          await whatsappService.sendTextMessage(phone, "ЁЯУд рк░рк╕рк┐ркж ркЕрккрк▓рлЛркб ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...");
          
          const uploadResult = await r2Service.uploadFromWhatsAppMedia(
            imageData.id,
            process.env.META_WHATSAPP_TOKEN!,
            'activities'
          );
          
          if (uploadResult.success) {
            imageInfo = {
              url: uploadResult.url,
              key: uploadResult.key,
              caption: imageData.caption || 'ркХрк╛ркоркирлЛ рклрлЛркЯрлЛ',
              whatsapp_media_id: imageData.id
            };
            await whatsappService.sendTextMessage(phone, "тЬЕ рклрлЛркЯрлЛ рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ ркЕрккрк▓рлЛркб ркеркпрлЛ!");
          } else {
            console.error('Failed to upload image to R2:', uploadResult.error);
            await whatsappService.sendTextMessage(phone, "тЭМ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркирк┐рк╖рлНрклрк│. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ ркЕркерк╡рк╛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ.");
            return;
          }
        } else if (messageText.toLowerCase() !== 'skip') {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ ркЕркерк╡рк╛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ:");
          return;
        }

        await this.completeActivityLog(phone, {
          ...currentData,
          image_info: imageInfo
        });
        break;
    }
  }

  private async showActivityTypes(phone: string) {
    const activityTypes = [
      { id: 'construction', title: 'ЁЯФи ркмрк╛ркВркзркХрк╛рко ркХрк╛рк░рлНркп', description: 'ркмрк┐рк▓рлНркбрк┐ркВркЧ ркЕркирлЗ ркмрк╛ркВркзркХрк╛ркоркирк╛ ркХрк╛рк░рлНркпрлЛ' },
      { id: 'inspection', title: 'ЁЯФН ркдрккрк╛рк╕', description: 'ркЧрлБркгрк╡ркдрлНркдрк╛ ркдрккрк╛рк╕ ркЕркирлЗ ркирк┐рк░рлАркХрлНрк╖ркг' },
      { id: 'maintenance', title: 'ЁЯФз ркЬрк╛рк│рк╡ркгрлА', description: 'рк╕рк╛ркзркирлЛ ркЕркирлЗ рк╕рк╛ркИркЯркирлА ркЬрк╛рк│рк╡ркгрлА' },
      { id: 'planning', title: 'ЁЯУЛ ркЖркпрлЛркЬрки', description: 'рккрлНрк░рлЛркЬрлЗркХрлНркЯ ркЖркпрлЛркЬрки ркЕркирлЗ рк╕ркВркХрк▓рки' },
      { id: 'other', title: 'ЁЯУЭ ркЕркирлНркп', description: 'ркЕркирлНркп ркХрк╛ркоркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУ' }
    ];

    await whatsappService.sendListMessage(
      phone,
      "ркдркорлЗ ркХркпрк╛ рккрлНрк░ркХрк╛рк░ркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ ркХрк░рлА?",
      "рккрлНрк░рк╡рлГркдрлНркдрк┐ рккрк╕ркВркж ркХрк░рлЛ",
      [{
        title: "рккрлНрк░рк╡рлГркдрлНркдрк┐ркирк╛ рккрлНрк░ркХрк╛рк░рлЛ",
        rows: activityTypes
      }]
    );
  }

  private async completeActivityLog(phone: string, activityData: any) {
    try {
      // Get user to link activity
      const user = await this.userService.getUserByPhone(phone);
      
      // Prepare activity details
      const activityDetails: any = { 
        logged_via: 'whatsapp',
        language: 'gujarati'
      };

      // Add image information if available
      if (activityData.image_info) {
        activityDetails.work_photo = activityData.image_info;
      }

      // Create activity in database
      const activity = await getDb().insert(activities).values({
        user_id: user!.id,
        site_id: this.getSiteUUID(activityData.site_id),
        activity_type: activityData.activity_type,
        hours: activityData.hours,
        description: activityData.description,
        image_url: activityData.image_info?.url || null,
        image_key: activityData.image_info?.key || null,
        details: activityDetails
      }).returning();

      // Clear session
      await this.clearSession(phone);

      // Send confirmation
      const imageStatus = activityData.image_info ? 'ЁЯУ╕ рклрлЛркЯрлЛ рк╕рк╣рк┐ркд' : 'ЁЯУЭ рклрлЛркЯрлЛ рк╡ркЧрк░';
      const confirmationMessage = `тЬЕ *рккрлНрк░рк╡рлГркдрлНркдрк┐ рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ ркирлЛркВркзрк╛ркИ!*

ЁЯУЛ *рк╡рк┐ркЧркдрлЛ:*
тАв рк╕рк╛ркИркЯ: ${this.getSiteName(activityData.site_id)}
тАв рккрлНрк░рк╡рлГркдрлНркдрк┐: ${this.formatActivityType(activityData.activity_type)}
тАв ркХрк▓рк╛ркХрлЛ: ${activityData.hours}
тАв рк╡рк░рлНркгрки: ${activityData.description || 'ркХрлЛркИ рк╡рк░рлНркгрки ркиркерлА'}
тАв ${imageStatus}

*рккрлНрк░рк╡рлГркдрлНркдрк┐ ID:* ${activity[0].id.slice(0, 8)}

ркорлБркЦрлНркп ркорлЗркирлБ рккрк░ ркЬрк╡рк╛ ркорк╛ркЯрлЗ *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ.`;

      await whatsappService.sendTextMessage(phone, confirmationMessage);

    } catch (error) {
      console.error('Error logging activity:', error);
      await whatsappService.sendTextMessage(phone, "ркорк╛ркл ркХрк░рк╢рлЛ, ркдркорк╛рк░рлА рккрлНрк░рк╡рлГркдрлНркдрк┐ ркирлЛркВркзрк╡рк╛ркорк╛ркВ ркнрлВрк▓ ркеркИ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.");
      await this.clearSession(phone);
    }
  }

  private async startMaterialRequest(phone: string) {
    await this.updateSession(phone, {
      intent: 'request_materials',
      step: 'select_site',
      data: {}
    });

    await this.showSiteSelection(phone);
  }

  private async handleMaterialRequest(phone: string, session: any, messageText: string, imageData?: ImageMessage) {
    const currentData = session.data || {};

    switch (session.step) {
      case 'select_site':
        if (!messageText.startsWith('site_')) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп рк╕рк╛ркИркЯ рккрк╕ркВркж ркХрк░рлЛ:");
          await this.showSiteSelection(phone);
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_material',
          data: { ...currentData, site_id: messageText }
        });

        await whatsappService.sendTextMessage(phone, "ркдркоркирлЗ ркХркИ рк╕рк╛ркоркЧрлНрк░рлАркирлА ркЬрк░рлВрк░ ркЫрлЗ? (ркЬрлЗрко ркХрлЗ, рк╕рк┐ркорлЗркирлНркЯ, рк╕рлНркЯрлАрк▓, рк░рлЗркдрлА рк╡ркЧрлЗрк░рлЗ):");
        break;

      case 'enter_material':
        if (messageText.length < 2) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп рк╕рк╛ркоркЧрлНрк░рлАркирлБркВ ркирк╛рко ркжрк╛ркЦрк▓ ркХрк░рлЛ:");
          return;
        }

        await this.updateSession(phone, {
          step: 'enter_quantity',
          data: { ...currentData, material_name: messageText }
        });

        await whatsappService.sendTextMessage(phone, "ркХрлЗркЯрк▓рлА ркорк╛ркдрлНрк░рк╛ркорк╛ркВ ркЬрлЛркИркП ркЫрлЗ? (ркЬрлЗрко ркХрлЗ, 10 ркмрлЗркЧ, 5 ркЯрки, 100 рккрлАрк╕):");
        break;

      case 'enter_quantity':
        const quantityMatch = messageText.match(/(\d+)\s*(.+)/);
        if (!quantityMatch) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркЖ рклрлЛрк░рлНркорлЗркЯркорк╛ркВ ркорк╛ркдрлНрк░рк╛ ркжрк╛ркЦрк▓ ркХрк░рлЛ: '10 ркмрлЗркЧ' ркЕркерк╡рк╛ '5 ркЯрки':");
          return;
        }

        const quantity = parseInt(quantityMatch[1]);
        const unit = quantityMatch[2].trim();

        await this.updateSession(phone, {
          step: 'select_urgency',
          data: { ...currentData, quantity, unit }
        });

        await this.showUrgencyOptions(phone);
        break;

      case 'select_urgency':
        const validUrgency = ['low', 'medium', 'high'];
        if (!validUrgency.includes(messageText)) {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркпрлЛркЧрлНркп ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХркдрк╛ркирлБркВ рк╕рлНркдрк░ рккрк╕ркВркж ркХрк░рлЛ:");
          await this.showUrgencyOptions(phone);
          return;
        }

        await this.updateSession(phone, {
          step: 'upload_material_image',
          data: { ...currentData, urgency: messageText }
        });

        await whatsappService.sendTextMessage(phone, "ЁЯУ╕ ркХрлГрккрк╛ ркХрк░рлАркирлЗ рк╕рк╛ркоркЧрлНрк░рлАркирлЛ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ:\n\nтАв ркЬрк░рлВрк░рлА рк╕рк╛ркоркЧрлНрк░рлАркирлЛ рклрлЛркЯрлЛ\nтАв рк╣рк╛рк▓ркирлА рк╕рк╛ркоркЧрлНрк░рлАркирлА рк╕рлНркерк┐ркдрк┐ркирлЛ рклрлЛркЯрлЛ\nтАв ркХрлЛркИ рклрлЛркЯрлЛ рки рк╣рлЛркп ркдрлЛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ");
        break;

      case 'upload_material_image':
        let materialImageInfo = null;
        
        if (imageData) {
          // Process the uploaded image and store in Cloudflare R2
          await whatsappService.sendTextMessage(phone, "ЁЯУд рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...");
          
          const uploadResult = await r2Service.uploadFromWhatsAppMedia(
            imageData.id,
            process.env.META_WHATSAPP_TOKEN!,
            'material-requests'
          );
          
          if (uploadResult.success) {
            materialImageInfo = {
              url: uploadResult.url,
              key: uploadResult.key,
              caption: imageData.caption || 'рк╕рк╛ркоркЧрлНрк░рлАркирлЛ рклрлЛркЯрлЛ',
              whatsapp_media_id: imageData.id
            };
            await whatsappService.sendTextMessage(phone, "тЬЕ рклрлЛркЯрлЛ рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ ркЕрккрк▓рлЛркб ркеркпрлЛ!");
          } else {
            console.error('Failed to upload material image to R2:', uploadResult.error);
            await whatsappService.sendTextMessage(phone, "тЭМ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркирк┐рк╖рлНрклрк│. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ ркЕркерк╡рк╛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ.");
            return;
          }
        } else if (messageText.toLowerCase() !== 'skip') {
          await whatsappService.sendTextMessage(phone, "ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ ркЕркерк╡рк╛ 'skip' ркЯрк╛ркИркк ркХрк░рлЛ:");
          return;
        }

        await this.completeMaterialRequest(phone, {
          ...currentData,
          image_info: materialImageInfo
        });
        break;
    }
  }

  private async showUrgencyOptions(phone: string) {
    const urgencyLevels = [
      { id: 'low', title: 'ЁЯЯв ркУркЫрлА рккрлНрк░рк╛ркеркорк┐ркХркдрк╛', description: 'ркПркХ ркЕркарк╡рк╛ркбрк┐ркпрк╛ркорк╛ркВ ркЬрлЛркИркП ркЫрлЗ' },
      { id: 'medium', title: 'ЁЯЯб ркоркзрлНркпрко рккрлНрк░рк╛ркеркорк┐ркХркдрк╛', description: '2-3 ркжрк┐рк╡рк╕ркорк╛ркВ ркЬрлЛркИркП ркЫрлЗ' },
      { id: 'high', title: 'ЁЯФ┤ ркЙркЪрлНркЪ рккрлНрк░рк╛ркеркорк┐ркХркдрк╛', description: 'ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХ ркЬрлЛркИркП ркЫрлЗ (ркЖркЬ/ркЖрк╡ркдрлАркХрк╛рк▓рлЗ)' }
    ];

    await whatsappService.sendListMessage(
      phone,
      "ркЖ рк╡рк┐ркиркВркдрлА ркХрлЗркЯрк▓рлА ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХ ркЫрлЗ?",
      "ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХркдрк╛ рккрк╕ркВркж ркХрк░рлЛ",
      [{
        title: "ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХркдрк╛ркирк╛ рк╕рлНркдрк░рлЛ",
        rows: urgencyLevels
      }]
    );
  }

  private async completeMaterialRequest(phone: string, requestData: any) {
    try {
      const user = await this.userService.getUserByPhone(phone);
      
      const request = await getDb().insert(material_requests).values({
        user_id: user!.id,
        material_name: requestData.material_name,
        quantity: requestData.quantity,
        unit: requestData.unit,
        site_id: this.getSiteUUID(requestData.site_id),
        urgency: requestData.urgency,
        requested_date: new Date(),
        image_url: requestData.image_info?.url || null,
        image_key: requestData.image_info?.key || null,
        notes: 'WhatsApp ркжрлНрк╡рк╛рк░рк╛ рк╡рк┐ркиркВркдрлА'
      }).returning();

      await this.clearSession(phone);

      const imageStatus = requestData.image_info ? 'ЁЯУ╕ рклрлЛркЯрлЛ рк╕рк╣рк┐ркд' : 'ЁЯУЭ рклрлЛркЯрлЛ рк╡ркЧрк░';
      const confirmationMessage = `тЬЕ *рк╕рк╛ркоркЧрлНрк░рлАркирлА рк╡рк┐ркиркВркдрлА ркорлЛркХрк▓рк╛ркИ ркЧркИ!*

ЁЯУж *рк╡рк┐ркиркВркдрлАркирлА рк╡рк┐ркЧркдрлЛ:*
тАв рк╕рк╛ркоркЧрлНрк░рлА: ${requestData.material_name}
тАв ркорк╛ркдрлНрк░рк╛: ${requestData.quantity} ${requestData.unit}
тАв рк╕рк╛ркИркЯ: ${this.getSiteName(requestData.site_id)}
тАв ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХркдрк╛: ${this.formatUrgency(requestData.urgency)}
тАв ${imageStatus}

*рк╡рк┐ркиркВркдрлА ID:* ${request[0].id.slice(0, 8)}

ркдркорк╛рк░рлА рк╡рк┐ркиркВркдрлА ркЦрк░рлАркжрлА ркЯрлАркоркирлЗ ркорлЛркХрк▓рлА ркжрлЗрк╡рк╛ркорк╛ркВ ркЖрк╡рлА ркЫрлЗ. рк╕рлНркЯрлЗркЯрк╕ рк╡рк┐рк╢рлЗ ркдркоркирлЗ ркЬрк╛ркг ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рк╢рлЗ.

ркорлБркЦрлНркп ркорлЗркирлБ рккрк░ ркЬрк╡рк╛ ркорк╛ркЯрлЗ *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ.`;

      await whatsappService.sendTextMessage(phone, confirmationMessage);

    } catch (error) {
      console.error('Error submitting material request:', error);
      await whatsappService.sendTextMessage(phone, "ркорк╛ркл ркХрк░рк╢рлЛ, ркдркорк╛рк░рлА рк╡рк┐ркиркВркдрлА ркорлЛркХрк▓рк╡рк╛ркорк╛ркВ ркнрлВрк▓ ркеркИ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.");
      await this.clearSession(phone);
    }
  }

  private async showDashboard(phone: string) {
    try {
      const user = await this.userService.getUserByPhone(phone);
      
      // Get recent activities (last 7 days)
      const recentActivities = await getDb()
        .select()
        .from(activities)
        .where(eq(activities.user_id, user!.id))
        .limit(5);

      // Get pending material requests
      const pendingRequests = await getDb()
        .select()
        .from(material_requests)
        .where(eq(material_requests.user_id, user!.id))
        .limit(3);

      const totalHours = recentActivities.reduce((sum, activity) => sum + (activity.hours || 0), 0);

      const dashboardMessage = `ЁЯУК *ркдркорк╛рк░рлБркВ ркбрлЗрк╢ркмрлЛрк░рлНркб*

ЁЯУЕ *ркЖ ркЕркарк╡рк╛ркбрк┐ркпрлЗ:*
тАв ркХрлБрк▓ ркирлЛркВркзрк╛ркпрлЗрк▓рк╛ ркХрк▓рк╛ркХрлЛ: ${totalHours}
тАв ркирлЛркВркзрк╛ркпрлЗрк▓рлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУ: ${recentActivities.length}
тАв ркмрк╛ркХрлА рк╡рк┐ркиркВркдрлАркУ: ${pendingRequests.length}

ЁЯУЭ *ркдрк╛ркЬрлЗркдрк░ркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУ:*
${recentActivities.map(activity => 
  `тАв ${this.formatActivityType(activity.activity_type || '')} - ${activity.hours}ркХрк▓`
).join('\n') || 'ркХрлЛркИ ркдрк╛ркЬрлЗркдрк░ркирлА рккрлНрк░рк╡рлГркдрлНркдрк┐ркУ ркиркерлА'}

ЁЯУж *ркмрк╛ркХрлА рк╕рк╛ркоркЧрлНрк░рлАркирлА рк╡рк┐ркиркВркдрлАркУ:*
${pendingRequests.map(request => 
  `тАв ${request.material_name} (${request.status})`
).join('\n') || 'ркХрлЛркИ ркмрк╛ркХрлА рк╡рк┐ркиркВркдрлАркУ ркиркерлА'}

рк╡ркзрлБ рк╡рк┐ркХрк▓рлНрккрлЛ ркорк╛ркЯрлЗ *ркорлЗркирлБ* ркЯрк╛ркИркк ркХрк░рлЛ.`;

      await whatsappService.sendTextMessage(phone, dashboardMessage);

    } catch (error) {
      console.error('Error fetching dashboard:', error);
      await whatsappService.sendTextMessage(phone, "ркорк╛ркл ркХрк░рк╢рлЛ, ркдркорк╛рк░рлБркВ ркбрлЗрк╢ркмрлЛрк░рлНркб рк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркнрлВрк▓ ркеркИ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.");
    }
  }

  // Helper methods
  private getSiteName(siteId: string): string {
    const siteNames: { [key: string]: string } = {
      'site_1': 'рк╕рк╛ркИркЯ A - рк░рк╣рлЗркарк╛ркг',
      'site_2': 'рк╕рк╛ркИркЯ B - рк╡рк╛ркгрк┐ркЬрлНркпрк┐ркХ', 
      'site_3': 'рк╕рк╛ркИркЯ C - рк░рк┐ркЯрлЗрк▓'
    };
    return siteNames[siteId] || 'ркЕркЬрлНркЮрк╛ркд рк╕рк╛ркИркЯ';
  }

  private getSiteUUID(displayId: string): string {
    const siteMapping: { [key: string]: string } = {
      'site_1': '11111111-1111-1111-1111-111111111111',
      'site_2': '22222222-2222-2222-2222-222222222222',
      'site_3': '33333333-3333-3333-3333-333333333333'
    };
    return siteMapping[displayId] || displayId;
  }

  private formatActivityType(type: string): string {
    const types: { [key: string]: string } = {
      'construction': 'ЁЯФи ркмрк╛ркВркзркХрк╛рко',
      'inspection': 'ЁЯФН ркдрккрк╛рк╕',
      'maintenance': 'ЁЯФз ркЬрк╛рк│рк╡ркгрлА',
      'planning': 'ЁЯУЛ ркЖркпрлЛркЬрки',
      'other': 'ЁЯУЭ ркЕркирлНркп'
    };
    return types[type] || type;
  }

  private formatUrgency(urgency: string): string {
    const urgencyMap: { [key: string]: string } = {
      'low': 'ЁЯЯв ркУркЫрлА рккрлНрк░рк╛ркеркорк┐ркХркдрк╛',
      'medium': 'ЁЯЯб ркоркзрлНркпрко рккрлНрк░рк╛ркеркорк┐ркХркдрк╛',
      'high': 'ЁЯФ┤ ркЙркЪрлНркЪ рккрлНрк░рк╛ркеркорк┐ркХркдрк╛'
    };
    return urgencyMap[urgency] || urgency;
  }
} 